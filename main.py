import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import (
    TELEGRAM_BOT_TOKEN, MANAGER_CHAT_ID, CITIES, EVENT_TYPES, LOCATIONS, 
    DURATIONS, ADDITIONAL_SERVICES, BASE_PRICES, DURATION_MULTIPLIERS
)
from user_data import user_data
from datetime import datetime
import pandas as pd

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–º –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
# –ö–æ–∂–µ–Ω —Å—Ç–∞–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–µ–≤–Ω–æ–º—É –µ—Ç–∞–ø—É –≤–∑–∞—î–º–æ–¥—ñ—ó
MAIN_MENU, CONTACT_MANAGER, SERVICES_INFO, VIEWING_SERVICE = range(4)
(CHOOSING_CITY, CHOOSING_EVENT_TYPE, CHOOSING_LOCATION, 
 CHOOSING_DURATION, CHOOSING_SERVICES) = range(4, 9)

# –û–ø—Ü—ñ—ó –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –µ–º–æ–¥–∑—ñ
MAIN_MENU_OPTIONS = {
    'contact_manager': 'üë©‚Äçüíº –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
    'services_info': 'üìù –î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏',
    'make_order': 'üéâ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
}

# –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Å–ª—É–≥ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —Ç–∞ –æ–ø–∏—Å–æ–º
SERVICE_DETAILS = {
    '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': {
        'description': 'üéÇ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ–∑–∞–±—É—Ç–Ω—å–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –¥—ñ—Ç–µ–π —Ç–∞ –¥–æ—Ä–æ—Å–ª–∏—Ö. –í–∫–ª—é—á–∞—î:\n'
                      '‚Ä¢ –ê–Ω—ñ–º–∞—Ç–æ—Ä—ñ–≤\n'
                      '‚Ä¢ –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É\n'
                      '‚Ä¢ –¢–µ–º–∞—Ç–∏—á–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è\n'
                      '‚Ä¢ –°–º–∞—á–Ω–∏–π —Ç–æ—Ä—Ç',
        'image': 'images/1.png'  # –®–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    },
    '–í–∏–ø—É—Å–∫–Ω–∏–π': {
        'description': 'üéì –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –≤–∏–ø—É—Å–∫–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞ –¥–ª—è —à–∫–æ–ª—è—Ä—ñ–≤ —Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤. –í–∫–ª—é—á–∞—î:\n'
                      '‚Ä¢ –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—É —á–∞—Å—Ç–∏–Ω—É\n'
                      '‚Ä¢ –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É\n'
                      '‚Ä¢ –§–æ—Ç–æ—Å–µ—Å—ñ—é\n'
                      '‚Ä¢ –ü–∞–º\'—è—Ç–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏',
        'image': 'images/1.png'  # –®–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    },
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤': {
        'description': 'üíº –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤. –í–∫–ª—é—á–∞—î:\n'
                      '‚Ä¢ –¢–∏–º–±—ñ–ª–¥–∏–Ω–≥\n'
                      '‚Ä¢ –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É\n'
                      '‚Ä¢ –ö–µ–π—Ç–µ—Ä–∏–Ω–≥\n'
                      '‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
        'image': 'images/1.png'  # –®–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    }
}

def calculate_total_price(location, duration, services):
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    
    Args:
        location (str): –û–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è
        duration (str): –û–±—Ä–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        services (list): –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
        
    Returns:
        int: –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    """
    # –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ –∑–∞ –ª–æ–∫–∞—Ü—ñ—é
    base_price = BASE_PRICES.get(location, 1500)
    
    # –ú–Ω–æ–∂–Ω–∏–∫ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
    duration_multiplier = DURATION_MULTIPLIERS.get(duration, 1)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
    total = base_price * duration_multiplier
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
    for service in services:
        service_info = ADDITIONAL_SERVICES.get(service)
        if service_info:
            total += service_info['price']
    
    return total

def format_price_info(location, duration, services):
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ü—ñ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    
    Args:
        location (str): –û–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è
        duration (str): –û–±—Ä–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        services (list): –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
        
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ü—ñ–Ω–∏
    """
    base_price = BASE_PRICES.get(location, 1500)
    duration_multiplier = DURATION_MULTIPLIERS.get(duration, 1)
    base_total = base_price * duration_multiplier
    
    info = (
        f"üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:\n\n"
        f"–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å ({location}): {base_price} –≥—Ä–Ω\n"
        f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ({duration}): x{duration_multiplier}\n"
        f"–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É: {base_total} –≥—Ä–Ω\n\n"
    )
    
    if services:
        info += "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:\n"
        services_total = 0
        for service in services:
            service_info = ADDITIONAL_SERVICES.get(service)
            if service_info:
                price = service_info['price']
                services_total += price
                info += f"‚Ä¢ {service}: {price} –≥—Ä–Ω\n"
        info += f"\n–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥: {services_total} –≥—Ä–Ω\n"
        info += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {base_total + services_total} –≥—Ä–Ω"
    else:
        info += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {base_total} –≥—Ä–Ω"
    
    return info

async def send_to_manager(context: ContextTypes.DEFAULT_TYPE, user_info: dict, message: str):
    """
    –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        user_info (dict): –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        message (str): –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    try:
        user = user_info['user']
        user_info_text = (
            f"üë§ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"ID: {user.id}\n"
            f"–Ü–º'—è: {user.first_name}"
        )
        if user.last_name:
            user_info_text += f" {user.last_name}"
        if user.username:
            user_info_text += f"\nUsername: @{user.username}"
            
        full_message = f"{user_info_text}\n\n{message}"
        
        logger.info(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É (ID: {MANAGER_CHAT_ID})")
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {full_message}")
        
        await context.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=full_message,
            parse_mode='HTML'
        )
        logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {str(e)}")
        await context.bot.send_message(
            chat_id=user.id,
            text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º."
        )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏
    
    Returns:
        int: –°—Ç–∞–Ω MAIN_MENU
    """
    keyboard = [
        [KeyboardButton(MAIN_MENU_OPTIONS['contact_manager'])],
        [KeyboardButton(MAIN_MENU_OPTIONS['services_info'])],
        [KeyboardButton(MAIN_MENU_OPTIONS['make_order'])]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    
    Returns:
        int: –°—Ç–∞–Ω MAIN_MENU
    """
    user = update.effective_user
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        f"üí¨ –ó–∞–ø–∏—Ç –Ω–∞ –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
        f"üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
        f"ID: {user.id}\n"
        f"–Ü–º'—è: {user.first_name}"
    )
    if user.last_name:
        manager_message += f" {user.last_name}"
    if user.username:
        manager_message += f"\nUsername: @{user.username}"
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await context.bot.send_message(
        chat_id=MANAGER_CHAT_ID,
        text=manager_message
    )
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
        "–ê –ø–æ–∫–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ –∞–±–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    return await show_main_menu(update, context)

async def services_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —ó—Ö –≤–∞—Ä—Ç—ñ—Å—Ç—å
    
    Returns:
        int: –°—Ç–∞–Ω VIEWING_SERVICE
    """
    info_message = (
        "üé™ –ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:\n\n"
        "üé≠ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Å–≤—è—Ç:\n"
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏
    info_message += "\nüìç –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ –∑–∞ –ª–æ–∫–∞—Ü—ñ—è–º–∏ (–∑–∞ –≥–æ–¥–∏–Ω—É):\n"
    for location, price in BASE_PRICES.items():
        info_message += f"‚Ä¢ {location}: {price} –≥—Ä–Ω\n"
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏
    info_message += "\nüéÅ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:\n"
    for service, info in ADDITIONAL_SERVICES.items():
        info_message += f"‚Ä¢ {service}: {info['price']} –≥—Ä–Ω\n"
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª—É–≥
    keyboard = []
    for service in SERVICE_DETAILS.keys():
        keyboard.append([KeyboardButton(service)])
    keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    info_message += (
        "\n\nüí° –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Å–ª—É–≥—É, "
        "–æ–±–µ—Ä—ñ—Ç—å —ó—ó –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
    )
    
    await update.message.reply_text(info_message, reply_markup=reply_markup)
    return VIEWING_SERVICE

async def show_service_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å—É –æ–±—Ä–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
    
    Returns:
        int: –°—Ç–∞–Ω VIEWING_SERVICE –∞–±–æ MAIN_MENU
    """
    service_name = update.message.text
    
    if service_name == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        return await show_main_menu(update, context)
    
    if service_name in SERVICE_DETAILS:
        service = SERVICE_DETAILS[service_name]
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏
        try:
            image_path = service['image']
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=InputFile(photo)
                    )
            else:
                logger.warning(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                await update.message.reply_text(
                    "–ù–∞ –∂–∞–ª—å, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {str(e)}")
            await update.message.reply_text(
                "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å—É –ø–æ—Å–ª—É–≥–∏
        await update.message.reply_text(
            f"üéØ {service_name}\n\n{service['description']}\n\n"
            "–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª—É–≥, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø–æ—Å–ª—É–≥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'"
        )
        return VIEWING_SERVICE
    
    return await services_info(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
    
    Returns:
        int: –°—Ç–∞–Ω MAIN_MENU
    """
    user = update.effective_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    existing_user = user_data.get_user(user.id)
    is_new_user = existing_user is None
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = {
        'first_name': user.first_name,
        'last_name': user.last_name,
        'username': user.username,
        'language_code': user.language_code,
        'last_visit': update.message.date.strftime("%Y-%m-%d %H:%M:%S")
    }
    
    if is_new_user:
        user_info['registration_date'] = update.message.date.strftime("%Y-%m-%d %H:%M:%S")
        user_info['orders'] = []
    
    user_data.add_user(user.id, user_info)
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if is_new_user:
        new_user_message = (
            f"üîî –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º:\n\n"
            f"üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            f"ID: {user.id}\n"
            f"–Ü–º'—è: {user.first_name}"
        )
        if user.last_name:
            new_user_message += f" {user.last_name}"
        if user.username:
            new_user_message += f"\nUsername: @{user.username}"
        if user.language_code:
            new_user_message += f"\n–ú–æ–≤–∞: {user.language_code}"
        
        current_time = update.message.date.strftime("%Y-%m-%d %H:%M:%S")
        new_user_message += f"\n\n‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {current_time}"
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await context.bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=new_user_message,
                parse_mode='HTML'
            )
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
    
    # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    context.user_data.clear()
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['user'] = user
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    context.user_data['state'] = MAIN_MENU
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user.first_name}! üéâ\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ–∑–∞–±—É—Ç–Ω—î —Å–≤—è—Ç–æ!"
    )
    return await show_main_menu(update, context)

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    
    Returns:
        int: –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
    """
    choice = update.message.text
    
    if choice == MAIN_MENU_OPTIONS['contact_manager']:
        context.user_data['state'] = CONTACT_MANAGER
        return await contact_manager(update, context)
    elif choice == MAIN_MENU_OPTIONS['services_info']:
        context.user_data['state'] = SERVICES_INFO
        return await services_info(update, context)
    elif choice == MAIN_MENU_OPTIONS['make_order']:
        context.user_data['state'] = CHOOSING_CITY
        keyboard = [[KeyboardButton(city)] for city in CITIES]
        keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            '–ß—É–¥–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:',
            reply_markup=reply_markup
        )
        return CHOOSING_CITY
    
    return MAIN_MENU

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó
    
    Returns:
        int: –°—Ç–∞–Ω CHOOSING_EVENT_TYPE –∞–±–æ MAIN_MENU
    """
    if update.message.text == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        context.user_data['state'] = MAIN_MENU
        return await show_main_menu(update, context)
    
    context.user_data['city'] = update.message.text
    context.user_data['state'] = CHOOSING_EVENT_TYPE
    
    keyboard = [[KeyboardButton(event_type)] for event_type in EVENT_TYPES]
    keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await update.message.reply_text(
        '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:',
        reply_markup=reply_markup
    )
    return CHOOSING_EVENT_TYPE

async def event_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó
    
    Returns:
        int: –°—Ç–∞–Ω CHOOSING_LOCATION –∞–±–æ MAIN_MENU
    """
    if update.message.text == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        context.user_data['state'] = MAIN_MENU
        return await show_main_menu(update, context)
    
    context.user_data['event_type'] = update.message.text
    context.user_data['state'] = CHOOSING_LOCATION
    
    keyboard = [[KeyboardButton(location)] for location in LOCATIONS]
    keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await update.message.reply_text(
        '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è:',
        reply_markup=reply_markup
    )
    return CHOOSING_LOCATION

async def location_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    
    Returns:
        int: –°—Ç–∞–Ω CHOOSING_DURATION –∞–±–æ CHOOSING_EVENT_TYPE
    """
    if update.message.text == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        context.user_data['state'] = MAIN_MENU
        keyboard = [[KeyboardButton(event_type)] for event_type in EVENT_TYPES]
        keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:', reply_markup=reply_markup)
        return CHOOSING_EVENT_TYPE
    
    location = update.message.text
    context.user_data['location'] = location
    context.user_data['state'] = CHOOSING_DURATION
    
    # –í–∏–±—ñ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç–µ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ª–æ–∫–∞—Ü—ñ—ó
    if '–î–æ–º–æ–π' in location or '–∫–∞—Ñ–µ' in location:
        durations = DURATIONS['–î–æ–º–æ–π/–∫–∞—Ñ–µ']
    elif '–¢—É—Ä–±–∞–∑–∞' in location:
        durations = DURATIONS['–¢—É—Ä–±–∞–∑–∞']
    elif '–°–∞–¥–∏–∫-—à–∫–æ–ª–∞' in location:
        durations = DURATIONS['–°–∞–¥–∏–∫-—à–∫–æ–ª–∞']
    else:
        durations = DURATIONS['–î–æ–º–æ–π/–∫–∞—Ñ–µ']
    
    keyboard = [[KeyboardButton(duration)] for duration in durations]
    keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    # –ü–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó
    base_price = BASE_PRICES.get(location, 1500)
    await update.message.reply_text(
        f'–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó "{location}": {base_price} –≥—Ä–Ω/–≥–æ–¥–∏–Ω–∞\n\n'
        '–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞—Ö–æ–¥—É:',
        reply_markup=reply_markup
    )
    return CHOOSING_DURATION

async def duration_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
    
    Returns:
        int: –°—Ç–∞–Ω CHOOSING_SERVICES –∞–±–æ CHOOSING_LOCATION
    """
    if update.message.text == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        context.user_data['state'] = MAIN_MENU
        keyboard = [[KeyboardButton(location)] for location in LOCATIONS]
        keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è:', reply_markup=reply_markup)
        return CHOOSING_LOCATION
    
    context.user_data['duration'] = update.message.text
    context.user_data['state'] = CHOOSING_SERVICES
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏
    keyboard = []
    for service, info in ADDITIONAL_SERVICES.items():
        button_text = f"{service} ({info['price']} –≥—Ä–Ω)"
        keyboard.append([KeyboardButton(button_text)])
    
    keyboard.append([KeyboardButton('‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É')])
    keyboard.append([KeyboardButton('üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å')])
    keyboard.append([KeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä')])
    keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    context.user_data['services'] = []
    
    # –ü–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    location = context.user_data.get('location')
    duration = context.user_data.get('duration')
    base_price = BASE_PRICES.get(location, 1500)
    duration_multiplier = DURATION_MULTIPLIERS.get(duration, 1)
    total = base_price * duration_multiplier
    
    await update.message.reply_text(
        f'–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total} –≥—Ä–Ω\n\n'
        '–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞).\n'
        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n'
        '‚Ä¢ ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É - –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏\n'
        '‚Ä¢ üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å - –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ\n'
        '‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        reply_markup=reply_markup
    )
    return CHOOSING_SERVICES

async def service_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
    
    Returns:
        int: –°—Ç–∞–Ω CHOOSING_SERVICES –∞–±–æ MAIN_MENU
    """
    choice = update.message.text
    
    if choice == '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        context.user_data['state'] = MAIN_MENU
        return await show_main_menu(update, context)
    
    if choice == '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É':
        if not context.user_data.get('services'):
            await update.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Å–ª—É–≥")
            return CHOOSING_SERVICES
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –æ–±—Ä–∞–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        keyboard = [[KeyboardButton(service)] for service in context.user_data['services']]
        keyboard.append([KeyboardButton('‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥')])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:',
            reply_markup=reply_markup
        )
        return CHOOSING_SERVICES
    
    if choice == '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥':
        context.user_data['state'] = CHOOSING_SERVICES
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service, info in ADDITIONAL_SERVICES.items():
            button_text = f"{service} ({info['price']} –≥—Ä–Ω)"
            keyboard.append([KeyboardButton(button_text)])
        
        keyboard.append([KeyboardButton('‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É')])
        keyboard.append([KeyboardButton('üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å')])
        keyboard.append([KeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä')])
        keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            '–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞).\n'
            '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n'
            '‚Ä¢ ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É - –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏\n'
            '‚Ä¢ üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å - –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ\n'
            '‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            reply_markup=reply_markup
        )
        return CHOOSING_SERVICES
    
    if choice == 'üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å':
        location = context.user_data.get('location')
        duration = context.user_data.get('duration')
        services = context.user_data.get('services', [])
        
        price_info = format_price_info(location, duration, services)
        await update.message.reply_text(price_info)
        return CHOOSING_SERVICES
    
    if choice == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä':
        context.user_data['state'] = MAIN_MENU
        location = context.user_data.get('location')
        duration = context.user_data.get('duration')
        services = context.user_data.get('services', [])
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        summary = (
            f"üéâ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
            f"üèô –ú—ñ—Å—Ç–æ: {context.user_data.get('city')}\n"
            f"üéà –¢–∏–ø –ø–æ–¥—ñ—ó: {context.user_data.get('event_type')}\n"
            f"üìç –õ–æ–∫–∞—Ü—ñ—è: {location}\n"
            f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}\n"
            f"üéÅ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:\n"
        )
        
        if services:
            for service in services:
                summary += f"   ‚Ä¢ {service}\n"
        else:
            summary += "   ‚Ä¢ –ù–µ –æ–±—Ä–∞–Ω–æ\n"
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å
        price_info = format_price_info(location, duration, services)
        summary += f"\n{price_info}"
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await send_to_manager(context, context.user_data, summary)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        await update.message.reply_text(
            summary + "\n–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        )
        return await show_main_menu(update, context)
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏
    if choice in context.user_data.get('services', []):
        context.user_data['services'].remove(choice)
        await update.message.reply_text(f"–í–∏–¥–∞–ª–µ–Ω–æ: {choice}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service, info in ADDITIONAL_SERVICES.items():
            button_text = f"{service} ({info['price']} –≥—Ä–Ω)"
            keyboard.append([KeyboardButton(button_text)])
        
        keyboard.append([KeyboardButton('‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É')])
        keyboard.append([KeyboardButton('üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å')])
        keyboard.append([KeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä')])
        keyboard.append([KeyboardButton('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            '–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞).\n'
            '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n'
            '‚Ä¢ ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É - –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏\n'
            '‚Ä¢ üí∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å - –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ\n'
            '‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            reply_markup=reply_markup
        )
        return CHOOSING_SERVICES
    
    # –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏
    service_name = choice.split(' (')[0]  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ—Å–ª—É–≥–∏ –±–µ–∑ —Ü—ñ–Ω–∏
    if service_name in ADDITIONAL_SERVICES and service_name not in context.user_data.get('services', []):
        if 'services' not in context.user_data:
            context.user_data['services'] = []
        context.user_data['services'].append(service_name)
        await update.message.reply_text(f"–î–æ–¥–∞–Ω–æ: {service_name}")
    
    return CHOOSING_SERVICES

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
    
    Returns:
        int: ConversationHandler.END
    """
    await update.message.reply_text('–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    return ConversationHandler.END

async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
    - –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    - –†–æ–∑—Å–∏–ª–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    - –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    """
    if str(update.effective_user.id) != str(MANAGER_CHAT_ID):
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/send <user_id> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n"
            "/broadcast <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> - —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n\n"
            "–î–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É:\n"
            "1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –±–æ—Ç—É\n"
            "2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ—é /send <user_id> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> –∞–±–æ /broadcast <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>"
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if update.message.reply_to_message and (
        update.message.reply_to_message.document or 
        update.message.reply_to_message.photo or 
        update.message.reply_to_message.video or 
        update.message.reply_to_message.audio
    ):
        file_message = update.message.reply_to_message
        command = context.args[0]
        
        if command == 'broadcast':
            message = ' '.join(context.args[1:])
            users = user_data.get_all_users()
            success = 0
            failed = 0
            
            # –†–æ–∑—Å–∏–ª–∫–∞ —Ñ–∞–π–ª—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            for user_id in users:
                try:
                    if file_message.document:
                        await context.bot.send_document(
                            chat_id=user_id,
                            document=file_message.document.file_id,
                            caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                        )
                    elif file_message.photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=file_message.photo[-1].file_id,
                            caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                        )
                    elif file_message.video:
                        await context.bot.send_video(
                            chat_id=user_id,
                            video=file_message.video.file_id,
                            caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                        )
                    elif file_message.audio:
                        await context.bot.send_audio(
                            chat_id=user_id,
                            audio=file_message.audio.file_id,
                            caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                        )
                    success += 1
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}")
                    failed += 1
            
            await update.message.reply_text(
                f"–†–æ–∑—Å–∏–ª–∫–∞ —Ñ–∞–π–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n"
                f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}"
            )
        else:
            try:
                target_user_id = int(command)
                message = ' '.join(context.args[1:])
                
                user_info = user_data.get_user(target_user_id)
                if not user_info:
                    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {target_user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                
                # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if file_message.document:
                    await context.bot.send_document(
                        chat_id=target_user_id,
                        document=file_message.document.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                    )
                elif file_message.photo:
                    await context.bot.send_photo(
                        chat_id=target_user_id,
                        photo=file_message.photo[-1].file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                    )
                elif file_message.video:
                    await context.bot.send_video(
                        chat_id=target_user_id,
                        video=file_message.video.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                    )
                elif file_message.audio:
                    await context.bot.send_audio(
                        chat_id=target_user_id,
                        audio=file_message.audio.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                    )
                
                await update.message.reply_text(
                    f"–§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:\n"
                    f"ID: {target_user_id}\n"
                    f"–Ü–º'—è: {user_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                    f"Username: @{user_info.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
                )
            except ValueError:
                await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        command = context.args[0]
        if command == 'broadcast':
            message = ' '.join(context.args[1:])
            if not message:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return
            
            users = user_data.get_all_users()
            if not users:
                await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
                
            success = 0
            failed = 0
            
            # –†–æ–∑—Å–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            for user_id in users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                    )
                    success += 1
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}")
                    failed += 1
            
            await update.message.reply_text(
                f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n"
                f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}"
            )
        else:
            try:
                target_user_id = int(command)
                message = ' '.join(context.args[1:])
                
                if not message:
                    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                    return
                
                user_info = user_data.get_user(target_user_id)
                if not user_info:
                    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {target_user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                    return
                
                # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
                )
                
                await update.message.reply_text(
                    f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:\n"
                    f"ID: {target_user_id}\n"
                    f"–Ü–º'—è: {user_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                    f"Username: @{user_info.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
                )
            except ValueError:
                await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /broadcast –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ñ–∞–π–ª—ñ–≤ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    
    Args:
        update: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    if str(update.effective_user.id) != str(MANAGER_CHAT_ID):
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if update.message.reply_to_message and (
        update.message.reply_to_message.document or 
        update.message.reply_to_message.photo or 
        update.message.reply_to_message.video or 
        update.message.reply_to_message.audio
    ):
        file_message = update.message.reply_to_message
        message = ' '.join(context.args) if context.args else ""
        
        users = user_data.get_all_users()
        if not users:
            await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
            return
            
        success = 0
        failed = 0
        
        # –†–æ–∑—Å–∏–ª–∫–∞ —Ñ–∞–π–ª—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        for user_id in users:
            try:
                if file_message.document:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=file_message.document.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}" if message else None
                    )
                elif file_message.photo:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=file_message.photo[-1].file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}" if message else None
                    )
                elif file_message.video:
                    await context.bot.send_video(
                        chat_id=user_id,
                        video=file_message.video.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}" if message else None
                    )
                elif file_message.audio:
                    await context.bot.send_audio(
                        chat_id=user_id,
                        audio=file_message.audio.file_id,
                        caption=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}" if message else None
                    )
                success += 1
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}")
                failed += 1
        
        await update.message.reply_text(
            f"–†–æ–∑—Å–∏–ª–∫–∞ —Ñ–∞–π–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n"
            f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}"
        )
        return
    
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not context.args:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/broadcast <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> - —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n\n"
            "–î–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É:\n"
            "1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –±–æ—Ç—É\n"
            "2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ—é /broadcast <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>"
        )
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    
    users = user_data.get_all_users()
    if not users:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        return
        
    success = 0
    failed = 0
    
    # –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    for user_id in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message}"
            )
            success += 1
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}")
            failed += 1
    
    await update.message.reply_text(
        f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n"
        f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}"
    )

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel —Ñ–∞–π–ª—É"""
    if str(update.effective_user.id) != str(MANAGER_CHAT_ID):
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_data = user_data.get_all_users()
    
    if not users_data:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
    users_list = []
    for user_id, user_info in users_data.items():
        user_dict = {
            'ID': user_id,
            "–Ü–º'—è": user_info.get('first_name', ''),
            '–ü—Ä—ñ–∑–≤–∏—â–µ': user_info.get('last_name', ''),
            'Username': user_info.get('username', ''),
            '–ú–æ–≤–∞': user_info.get('language_code', ''),
            '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó': user_info.get('registration_date', ''),
            '–û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–∑–∏—Ç': user_info.get('last_visit', ''),
            '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å': len(user_info.get('orders', [])),
            '–°—Ç–∞—Ç—É—Å': user_info.get('status', '–ê–∫—Ç–∏–≤–Ω–∏–π')
        }
        users_list.append(user_dict)

    df = pd.DataFrame(users_list)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª Excel
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"users_list_{timestamp}.xlsx"
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ
    writer = pd.ExcelWriter(filename, engine='openpyxl')
    df.to_excel(writer, index=False, sheet_name='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç worksheet
    worksheet = writer.sheets['–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ']
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤
    for column in worksheet.columns:
        max_length = 0
        column = [cell for cell in column]
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 2)
        worksheet.column_dimensions[column[0].column_letter].width = adjusted_width
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    writer.close()
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
    try:
        with open(filename, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename=filename,
                caption=f"–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—Ç–∞–Ω–æ–º –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        os.remove(filename)
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}")
        if os.path.exists(filename):
            os.remove(filename)

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    
    –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞
    """
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
            VIEWING_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_service_details)],
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
            CHOOSING_EVENT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen)],
            CHOOSING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_chosen)],
            CHOOSING_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, duration_chosen)],
            CHOOSING_SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, service_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    application.add_handler(CommandHandler('send', send_message))
    application.add_handler(CommandHandler('broadcast', broadcast_message))
    application.add_handler(CommandHandler('users', users_command))
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main() 
