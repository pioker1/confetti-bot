import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_BOT_TOKEN, CITIES, MANAGER_CHAT_ID
from user_data import user_data
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
MAIN_MENU, CHOOSING_CITY = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å user_data
    if user_data is None:
        logger.error("–ü–æ–º–∏–ª–∫–∞: user_data –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        await update.message.reply_text(
            "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return ConversationHandler.END
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    existing_user = user_data.get_user(user_id)
    if not existing_user:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_info = {
            'user_id': user_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'created_at': datetime.now().isoformat()
        }
        user_data.add_user(user_id, user_info)
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if MANAGER_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=MANAGER_CHAT_ID,
                    text=f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n"
                         f"ID: {user_id}\n"
                         f"Username: @{user.username if user.username else '–Ω–µ–º–∞—î'}\n"
                         f"–Ü–º'—è: {user.first_name} {user.last_name if user.last_name else ''}"
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    
    # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data.clear()
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥ –∞–Ω—ñ–º–∞—Ç–æ—Ä–∞.\n"
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–æ–¥—ñ—è:",
        reply_markup=create_city_keyboard()
    )
    
    return CHOOSING_CITY

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city = update.message.text
    
    if city not in CITIES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(city)] for city in CITIES],
                resize_keyboard=True
            )
        )
        return CHOOSING_CITY
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
    user_id = str(update.effective_user.id)
    user_data.update_user(user_id, {'city': city})
    
    await update.message.reply_text(
        f"–ß—É–¥–æ–≤–æ! –í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ {city}.\n"
        "–°–∫–æ—Ä–æ –º–∏ –¥–æ–¥–∞–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    await update.message.reply_text(
        '–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main() 
