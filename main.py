import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_BOT_TOKEN, CITIES
from user_data import user_data

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
MAIN_MENU, CHOOSING_CITY = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    
    # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = {
        'first_name': user.first_name,
        'last_name': user.last_name,
        'username': user.username,
        'language_code': user.language_code,
        'last_visit': update.message.date.strftime("%Y-%m-%d %H:%M:%S"),
        'registration_date': update.message.date.strftime("%Y-%m-%d %H:%M:%S"),
        'status': '–ê–∫—Ç–∏–≤–Ω–∏–π'
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data.add_user(str(user.id), user_info)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user.first_name}! üéâ\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ–∑–∞–±—É—Ç–Ω—î —Å–≤—è—Ç–æ!\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ —Å–≤—è—Ç–æ:"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º—ñ—Å—Ç–∞–º–∏
    keyboard = [[KeyboardButton(city)] for city in CITIES]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_CITY

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city = update.message.text
    
    if city not in CITIES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(city)] for city in CITIES],
                resize_keyboard=True
            )
        )
        return CHOOSING_CITY
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
    user_id = str(update.effective_user.id)
    user_data.update_user(user_id, {'city': city})
    
    await update.message.reply_text(
        f"–ß—É–¥–æ–≤–æ! –í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ {city}.\n"
        "–°–∫–æ—Ä–æ –º–∏ –¥–æ–¥–∞–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    await update.message.reply_text(
        '–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main() 
