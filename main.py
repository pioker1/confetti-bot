import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import (
    TELEGRAM_BOT_TOKEN, CITIES, MANAGER_CHAT_ID, EVENT_TYPES,
    CITY_CHANNELS, GENERAL_INFO, MANAGER_INFO, MANAGER_CONTACT_MESSAGES,
    LOCATION_PDF_FILES
)
from user_data import user_data
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_CITY, CHOOSING_EVENT_TYPE, CHOOSING_LOCATION = range(3)

# –ö–Ω–æ–ø–∫–∏
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CONTACT_MANAGER_BUTTON = "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
SUGGEST_LOCATION_BUTTON = "üó∫ –ü—ñ–¥–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –º—ñ—Å—Ü—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è"

# –õ–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
LOCATIONS = {
    'üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': [
        'üè† –í–¥–æ–º–∞',
        'üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ',
        'üè´ –°–∞–¥–æ—á–æ–∫/–®–∫–æ–ª–∞',
        'üè∞ –ó–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å',
        'üìç –Ü–Ω—à–µ'
    ],
    'üéì –í–∏–ø—É—Å–∫–Ω–∏–π': [
        'üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ',
        'üè´ –°–∞–¥–æ—á–æ–∫/–®–∫–æ–ª–∞',
        'üè∞ –ó–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å',
        'üìç –Ü–Ω—à–µ'
    ]
}

def create_city_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º—ñ—Å—Ç–∞–º–∏"""
    keyboard = [[KeyboardButton(city)] for city in CITIES]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def create_event_type_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–∏–ø–∞–º–∏ –ø–æ–¥—ñ–π"""
    keyboard = []
    # –î–æ–¥–∞—î–º–æ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π –ø–æ 2 –≤ —Ä—è–¥–æ–∫
    for i in range(0, len(EVENT_TYPES), 2):
        row = [KeyboardButton(EVENT_TYPES[i])]
        if i + 1 < len(EVENT_TYPES):
            row.append(KeyboardButton(EVENT_TYPES[i + 1]))
        keyboard.append(row)
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_location_keyboard(event_type: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ª–æ–∫–∞—Ü—ñ—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
    locations = LOCATIONS.get(event_type, [])
    keyboard = []
    # –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—ó –ø–æ 2 –≤ —Ä—è–¥–æ–∫
    for i in range(0, len(locations), 2):
        row = [KeyboardButton(locations[i])]
        if i + 1 < len(locations):
            row.append(KeyboardButton(locations[i + 1]))
        keyboard.append(row)
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_other_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É '–Ü–Ω—à–µ'"""
    keyboard = [
        [KeyboardButton(SUGGEST_LOCATION_BUTTON)],
        [KeyboardButton(CONTACT_MANAGER_BUTTON)],
        [KeyboardButton(BACK_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_manager_contact_message(city: str) -> str:
    """–§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—Ç–∞"""
    manager = MANAGER_INFO[city]
    message_template = MANAGER_CONTACT_MESSAGES[city]
    return message_template.format(
        phone=manager['phone'],
        name=manager['name'],
        telegram=manager['telegram']
    )

def initialize_user_choices(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if 'choices' not in context.user_data:
        context.user_data['choices'] = []

def add_choice(context: ContextTypes.DEFAULT_TYPE, choice_type: str, value: str) -> None:
    """–î–æ–¥–∞—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó"""
    initialize_user_choices(context)
    context.user_data['choices'].append({'type': choice_type, 'value': value})
    logger.info(f"–î–æ–¥–∞–Ω–æ –≤–∏–±—ñ—Ä: {choice_type} = {value}")

def remove_last_choice(context: ContextTypes.DEFAULT_TYPE) -> dict:
    """–í–∏–¥–∞–ª—è—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    initialize_user_choices(context)
    if context.user_data['choices']:
        last_choice = context.user_data['choices'].pop()
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä: {last_choice}")
        return last_choice
    return None

def get_current_choices(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    initialize_user_choices(context)
    if not context.user_data['choices']:
        return "–©–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É"
    
    choices_text = "–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏:\n"
    for choice in context.user_data['choices']:
        choices_text += f"‚Ä¢ {choice['type']}: {choice['value']}\n"
    return choices_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = update.effective_user
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
    user_data.clear_conversation_state(user.id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = {
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'last_interaction': datetime.now().isoformat()
    }
    user_data.add_user(user.id, user_info)
    
    await update.message.reply_text(
        "üéâ –í—ñ—Ç–∞—î–º–æ —É Confetti - –≤–∞—à–æ–º—É –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É —É —Å–≤—ñ—Ç –Ω–µ–∑–∞–±—É—Ç–Ω—ñ—Ö —Å–≤—è—Ç! "
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Å–≤—è—Ç–æ:",
        reply_markup=create_city_keyboard()
    )
    
    return CHOOSING_CITY

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city = update.message.text
    
    if city not in CITIES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
    add_choice(context, "–ú—ñ—Å—Ç–æ", city)
    await save_state(update, context, CHOOSING_EVENT_TYPE)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:",
        reply_markup=create_event_type_keyboard()
    )
    
    return CHOOSING_EVENT_TYPE

async def event_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
    event_type = update.message.text
    
    if event_type == BACK_BUTTON:
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
        last_choice = remove_last_choice(context)
        if last_choice:
            if last_choice['type'] == "–ú—ñ—Å—Ç–æ":
                await save_state(update, context, CHOOSING_CITY)
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–æ–¥—ñ—è:",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
            else:
                await save_state(update, context, CHOOSING_EVENT_TYPE)
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                    reply_markup=create_event_type_keyboard()
                )
                return CHOOSING_EVENT_TYPE
    
    if event_type == CONTACT_MANAGER_BUTTON:
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        city = next((choice['value'] for choice in context.user_data['choices'] 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        await update.message.reply_text(
            get_manager_contact_message(city),
            reply_markup=create_other_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    if event_type == SUGGEST_LOCATION_BUTTON:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ PDF —Ñ–∞–π–ª –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ —â–æ–¥–æ –º—ñ—Å—Ü—å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
        city = next((choice['value'] for choice in context.user_data['choices'] 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        pdf_path = LOCATION_PDF_FILES.get(city)
        try:
            with open(pdf_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    caption=f"üìç –ü—ñ–¥–∫–∞–∑–∫–∏ —â–æ–¥–æ –º—ñ—Å—Ü—å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —É –º—ñ—Å—Ç—ñ {city}",
                    reply_markup=create_other_keyboard()
                )
        except FileNotFoundError:
            await update.message.reply_text(
                "–ù–∞ –∂–∞–ª—å, —Ñ–∞–π–ª –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
                reply_markup=create_other_keyboard()
            )
        return CHOOSING_EVENT_TYPE
    
    if event_type not in EVENT_TYPES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó
    add_choice(context, "–¢–∏–ø –ø–æ–¥—ñ—ó", event_type)
    
    # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≥—ñ–ª–æ–∫
    if 'üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π' in event_type:
        city = next((choice['value'] for choice in context.user_data['choices'] 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        channel_link = CITY_CHANNELS[city]
        await update.message.reply_text(
            f"üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π —É –º—ñ—Å—Ç—ñ {city}\n"
            f"–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π:\n"
            f"{channel_link}",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    elif 'üéØ –Ü–Ω—à–µ' in event_type:
        city = next((choice['value'] for choice in context.user_data['choices'] 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        add_choice(context, "–¢–∏–ø –ø–æ–¥—ñ—ó", event_type)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–ø—Ü—ñ—è–º–∏
        await update.message.reply_text(
            f"{GENERAL_INFO[city]}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=create_other_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    # –î–ª—è –î–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –í–∏–ø—É—Å–∫–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
    elif 'üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è' in event_type or 'üéì –í–∏–ø—É—Å–∫–Ω–∏–π' in event_type:
        await save_state(update, context, CHOOSING_LOCATION)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –ø–æ–¥—ñ—ó:",
            reply_markup=create_location_keyboard(event_type)
        )
        return CHOOSING_LOCATION
    
    # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
    await update.message.reply_text(
        "–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º..."
    )
    
    return ConversationHandler.END

async def location_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó"""
    location = update.message.text
    event_type = next((choice['value'] for choice in context.user_data['choices'] 
                      if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
    
    if location == BACK_BUTTON:
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
        remove_last_choice(context)
        await save_state(update, context, CHOOSING_EVENT_TYPE)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    if event_type and location not in LOCATIONS.get(event_type, []):
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_location_keyboard(event_type)
        )
        return CHOOSING_LOCATION
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
    add_choice(context, "–õ–æ–∫–∞—Ü—ñ—è", location)
    await save_state(update, context, CHOOSING_LOCATION)
    
    # –¢—É—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ (–±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó! –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º..."
    )
    
    return ConversationHandler.END

async def save_state(update: Update, context: ContextTypes.DEFAULT_TYPE, state: int) -> None:
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏"""
    if user_data and update.effective_user:
        state_data = {
            'choices': context.user_data.get('choices', []),
            'last_state': state,
            'last_update': datetime.now().isoformat()
        }
        user_data.save_conversation_state(update.effective_user.id, state_data)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    if user_data and update.effective_user:
        user_data.clear_conversation_state(update.effective_user.id)
    
    await update.message.reply_text(
        '–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
            CHOOSING_EVENT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen)],
            CHOOSING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main() 
