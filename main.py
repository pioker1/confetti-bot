import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import (
    TELEGRAM_BOT_TOKEN, CITIES, MANAGER_CHAT_ID, EVENT_TYPES,
    CITY_CHANNELS, GENERAL_INFO, MANAGER_INFO
)
from user_data import user_data
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_CITY, CHOOSING_EVENT_TYPE = range(2)

# –ö–Ω–æ–ø–∫–∏
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CONTACT_MANAGER_BUTTON = "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"

def create_city_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º—ñ—Å—Ç–∞–º–∏"""
    keyboard = [[KeyboardButton(city)] for city in CITIES]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def create_event_type_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–∏–ø–∞–º–∏ –ø–æ–¥—ñ–π"""
    keyboard = []
    # –î–æ–¥–∞—î–º–æ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π –ø–æ 2 –≤ —Ä—è–¥–æ–∫
    for i in range(0, len(EVENT_TYPES), 2):
        row = [KeyboardButton(EVENT_TYPES[i])]
        if i + 1 < len(EVENT_TYPES):
            row.append(KeyboardButton(EVENT_TYPES[i + 1]))
        keyboard.append(row)
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_other_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É '–Ü–Ω—à–µ'"""
    keyboard = [
        [KeyboardButton(CONTACT_MANAGER_BUTTON)],
        [KeyboardButton(BACK_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å user_data
    if user_data is None:
        logger.error("–ü–æ–º–∏–ª–∫–∞: user_data –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        await update.message.reply_text(
            "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return ConversationHandler.END
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
    existing_user = user_data.get_user(user_id)
    if not existing_user:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_info = {
            'user_id': user_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'created_at': datetime.now().isoformat()
        }
        user_data.add_user(user_id, user_info)
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if MANAGER_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=MANAGER_CHAT_ID,
                    text=f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n"
                         f"ID: {user_id}\n"
                         f"Username: @{user.username if user.username else '–Ω–µ–º–∞—î'}\n"
                         f"–Ü–º'—è: {user.first_name} {user.last_name if user.last_name else ''}"
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    
    # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data.clear()
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥ –∞–Ω—ñ–º–∞—Ç–æ—Ä–∞.\n"
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–æ–¥—ñ—è:",
        reply_markup=create_city_keyboard()
    )
    
    return CHOOSING_CITY

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city = update.message.text
    
    if city not in CITIES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
    context.user_data['city'] = city
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
    await update.message.reply_text(
        f"üèô –í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city}\n"
        "–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó:",
        reply_markup=create_event_type_keyboard()
    )
    
    return CHOOSING_EVENT_TYPE

async def event_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
    event_type = update.message.text
    city = context.user_data.get('city')
    
    if event_type == BACK_BUTTON:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–æ–¥—ñ—è:",
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY
    
    if event_type == CONTACT_MANAGER_BUTTON:
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = MANAGER_INFO[city]
        await update.message.reply_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ({city}):\n\n"
            f"–Ü–º'—è: {manager['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {manager['phone']}\n"
            f"Telegram: {manager['telegram']}"
        )
        # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
        return CHOOSING_EVENT_TYPE
    
    if event_type not in EVENT_TYPES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó
    context.user_data['event_type'] = event_type
    
    # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≥—ñ–ª–æ–∫
    if 'üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π' in event_type:
        channel_link = CITY_CHANNELS[city]
        await update.message.reply_text(
            f"üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π —É –º—ñ—Å—Ç—ñ {city}\n\n"
            f"–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π:\n"
            f"{channel_link}",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    elif 'üéØ –Ü–Ω—à–µ' in event_type:
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        await update.message.reply_text(
            GENERAL_INFO[city],
            reply_markup=create_other_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
    # –¢—É—Ç –±—É–¥–µ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
    await update.message.reply_text(
        f"üéâ –í–∏ –æ–±—Ä–∞–ª–∏: {event_type}\n"
        "–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º..."
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    await update.message.reply_text(
        '–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
            CHOOSING_EVENT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main() 
