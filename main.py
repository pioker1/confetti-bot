# ============================================
# –Ü–ú–ü–û–†–¢–ò –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# ============================================
import logging
import os
import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import (
    TELEGRAM_BOT_TOKEN, CITIES, EVENT_TYPES_LIST,
    CITY_CHANNELS, GENERAL_INFO, MANAGER_INFO, MANAGER_CONTACT_MESSAGES, MANAGER_CHAT_ID,
    LOCATION_PDF_FILES, LOCATIONS, LOCATION_INFO, THEMES, THEME_INFO, THEME_BTN, Hello_World, THEME_PHOTOS, EVENT_FORMATS, HOURLY_PRICES, PAKET_PRICES, PAKET_PHOTOS, QWEST, QWEST_PHOTOS, ADDITIONAL_SERVICES_WITH_SUBMENU, ADDITIONAL_SERVICES_SINGLE, ADDITIONAL_SERVICES_PHOTOS, TAXI_PRICES, FAMILY_INFO, FAMILY_INFO_INFO2, FAMALY_TRIP
)
from user_data import user_data
from datetime import datetime
import telegram.ext._updater as _updater_module
import pandas as pd
from io import BytesIO

# --- –§–£–ù–ö–¶–Ü–Ø –£–ù–Ü–§–Ü–ö–ê–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ---
def get_unified_user_info(user, old_user=None, update=None, chat=None, phone=None):
    now = datetime.now().isoformat()
    return {
        'user_id': getattr(user, 'id', None),
        'username': getattr(user, 'username', None),
        'first_name': getattr(user, 'first_name', None),
        'last_name': getattr(user, 'last_name', None),
        'language_code': getattr(user, 'language_code', None),
        'is_bot': getattr(user, 'is_bot', None),
        'status': (old_user or {}).get('status', None),
        'last_update': now,
        'created_at': (old_user or {}).get('created_at', now),
        'phone_number': phone or (old_user or {}).get('phone_number', None),
        'chat_id': getattr(chat, 'id', None) if chat else (old_user or {}).get('chat_id', None),
        'type': getattr(chat, 'type', None) if chat else (old_user or {}).get('type', None),
        'full_user_obj': user.to_dict() if hasattr(user, 'to_dict') else str(user),
        'device_info': (old_user or {}).get('device_info', None),
        'visits': (old_user or {}).get('visits', 0),
        'order_count': (old_user or {}).get('order_count', 0),
    }

# –î–æ–¥–∞—î–º–æ slot –¥–ª—è `_Updater__polling_cleanup_cb` —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ AttributeError –ø—Ä–∏ build()
_updater_module.Updater.__slots__ = (*_updater_module.Updater.__slots__, '_Updater__polling_cleanup_cb')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============================================
# –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –°–¢–ê–ù–ò
# ============================================
# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_CITY, CHOOSING_EVENT_TYPE, CHOOSING_EVENT_TYPE_Sim_svjata, CHOOSING_EVENT_TYPE_inshe, CHOOSING_EVENT_TYPE_afisha, CHOOSING_LOCATION, CHOOSING_LOCATION_inshe, CHOOSING_THEME, CHOOSING_THEME2, CHOOSING_THEME_DETAILS, CHOOSING_FORMAT, CHOOSING_HOURLY_PRICE, CHOOSING_PACKAGE, CHOOSING_QWEST, CHOOSING_QWEST_DURATION, CHOOSING_FINAL, CHOOSING_ADDITIONAL_SERVICES, CHOOSING_SERVICE_OPTION, CHOOSING_DISTRICT, CHOOSING_SUMMARY,PHONE_CONTACT, FFMILY_DOP = range(22)

STATE_NAMES = {
    CHOOSING_CITY: 'CHOOSING_CITY',
    CHOOSING_EVENT_TYPE: 'CHOOSING_EVENT_TYPE',
    CHOOSING_EVENT_TYPE_Sim_svjata: 'CHOOSING_EVENT_TYPE_Sim_svjata',
    FFMILY_DOP: 'FFMILY_DOP',
    CHOOSING_EVENT_TYPE_inshe: 'CHOOSING_EVENT_TYPE_inshe',
    CHOOSING_EVENT_TYPE_afisha: 'CHOOSING_EVENT_TYPE_afisha',
    CHOOSING_LOCATION: 'CHOOSING_LOCATION',
    CHOOSING_LOCATION_inshe: 'CHOOSING_LOCATION_inshe',
    CHOOSING_THEME: 'CHOOSING_THEME',
    CHOOSING_THEME2: 'CHOOSING_THEME2',
    CHOOSING_THEME_DETAILS: 'CHOOSING_THEME_DETAILS',
    CHOOSING_FORMAT: 'CHOOSING_FORMAT',
    CHOOSING_HOURLY_PRICE: 'CHOOSING_HOURLY_PRICE',
    CHOOSING_PACKAGE: 'CHOOSING_PACKAGE',
    CHOOSING_QWEST: 'CHOOSING_QWEST',
    CHOOSING_QWEST_DURATION: 'CHOOSING_QWEST_DURATION',
    CHOOSING_FINAL: 'CHOOSING_FINAL',
    CHOOSING_ADDITIONAL_SERVICES: 'CHOOSING_ADDITIONAL_SERVICES',
    CHOOSING_SERVICE_OPTION: 'CHOOSING_SERVICE_OPTION',
    CHOOSING_DISTRICT: 'CHOOSING_DISTRICT',
    CHOOSING_SUMMARY: 'CHOOSING_SUMMARY',
    PHONE_CONTACT: 'PHONE_CONTACT'
}

# –ö–Ω–æ–ø–∫–∏
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CONTACT_MANAGER_BUTTON = "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
SUGGEST_LOCATION_BUTTON = "üó∫ –ü—ñ–¥–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –º—ñ—Å—Ü—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è"
WOW_BUTTON = "–í–∞—É! üòç"
NEXT_BUTTON = "‚û°Ô∏è –î–∞–ª—ñ"
DELETE_CHOICE_BUTTON = "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—ñ—Ä"
ADDITIONAL_SERVICES_BUTTON = "‚ûï –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏"

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—É –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–æ—Å–ª—É–≥
SHOW_SELECTED_SERVICES_BUTTON = "üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏"

# ============================================
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –í–ò–ë–û–†–ê–ú–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# ============================================
def vibir(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –∑ —É—Å—ñ–º–∞ –≤–∏–±–æ—Ä–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not context.user_data.get('choices'):
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑—Ä–æ–±–∏–≤ –∂–æ–¥–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É"
    
    result = "–í–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
    for choice in context.user_data['choices']:
        result += f"- {choice['type']}: {choice['value']}\n"
    return result

def remove_choice_by_type(context: ContextTypes.DEFAULT_TYPE, choice_type: str) -> None:
    """–í–∏–¥–∞–ª—è—î –≤—Å—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–∏–ø–æ–º"""
    try:
        initialize_user_choices(context)
        if not context.user_data.get('choices'):
            logger.warning(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±–æ—Ä–∏ —Ç–∏–ø—É {choice_type}, –∞–ª–µ —Å–ø–∏—Å–æ–∫ –≤–∏–±–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return

        original_length = len(context.user_data['choices'])
        context.user_data['choices'] = [
            choice for choice in context.user_data['choices']
            if choice['type'] != choice_type
        ]
        removed_count = original_length - len(context.user_data['choices'])
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ {removed_count} –≤–∏–±–æ—Ä—ñ–≤ —Ç–∏–ø—É: {choice_type}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤–∏–±–æ—Ä—ñ–≤ —Ç–∏–ø—É {choice_type}: {str(e)}")
        raise

def initialize_user_choices(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        if 'choices' not in context.user_data:
            context.user_data['choices'] = []
            logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
        raise

def add_choice(context: ContextTypes.DEFAULT_TYPE, choice_type: str, value: str) -> None:
    """–î–æ–¥–∞—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó, –≤–∏–¥–∞–ª—è—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–∫–æ–≥–æ –∂ —Ç–∏–ø—É –¥–ª—è '–§–æ—Ä–º–∞—Ç', '–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞', '–ü–∞–∫–µ—Ç'."""
    try:
        initialize_user_choices(context)
        if not isinstance(choice_type, str) or not isinstance(value, str):
            logger.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±–æ—Ä—É: type={type(choice_type)}, value={type(value)}")
            raise ValueError("–¢–∏–ø —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä—è–¥–∫–∞–º–∏")
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä —Ç–æ–≥–æ –∂ —Ç–∏–ø—É –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if choice_type in ["–§–æ—Ä–º–∞—Ç", "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞", "–ü–∞–∫–µ—Ç"]:
            remove_choice_by_type(context, choice_type)
        context.user_data['choices'].append({'type': choice_type, 'value': value})
        logger.info(f"–î–æ–¥–∞–Ω–æ –≤–∏–±—ñ—Ä: {choice_type} = {value}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏–±–æ—Ä—É: {str(e)}")
        raise

# ============================================
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–ê–í–Ü–ê–¢–£–†
# ============================================
def create_city_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º—ñ—Å—Ç–∞–º–∏"""
    keyboard = [[KeyboardButton(city)] for city in CITIES]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def create_event_type_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–∏–ø–∞–º–∏ –ø–æ–¥—ñ–π"""
    keyboard = []
    for i in range(0, len(EVENT_TYPES_LIST), 2):
        row = [KeyboardButton(EVENT_TYPES_LIST[i])]
        if i + 1 < len(EVENT_TYPES_LIST):
            row.append(KeyboardButton(EVENT_TYPES_LIST[i + 1]))
        keyboard.append(row)
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_theme_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ —Å–≤—è—Ç"""
    keyboard = []
    for i in range(0, len(THEMES), 2):
        row = [KeyboardButton(THEMES[i])]
        if i + 1 < len(THEMES):
            row.append(KeyboardButton(THEMES[i + 1]))
        keyboard.append(row)
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_theme2_keyboard(theme: str, city: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø—ñ–¥—Ç–µ–º–∞–º–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ –º—ñ—Å—Ç–∞"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥—Ç–µ–º –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ –º—ñ—Å—Ç–∞
        from config import THEME_BTN
        subthemes = THEME_BTN.get(city, {}).get(theme, [])
        if not subthemes:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ç–µ–º –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {theme} —É –º—ñ—Å—Ç—ñ: {city}")
            return create_theme_keyboard()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = []
        for i in range(0, len(subthemes), 2):
            row = [KeyboardButton(subthemes[i])]
            if i + 1 < len(subthemes):
                row.append(KeyboardButton(subthemes[i + 1]))
            keyboard.append(row)
            
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥—Ç–µ–º: {str(e)}")
        return create_theme_keyboard()

def create_other_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è —Ä–æ–∑–¥—ñ–ª—É '–Ü–Ω—à–µ'"""
    keyboard = [
        [KeyboardButton(CONTACT_MANAGER_BUTTON)],
        [KeyboardButton(BACK_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_sim_svjata_keyboard_with_back(famaly_trip, city=None):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö —Å–≤—è—Ç –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–∑–∞–¥ —Ç–∞ —Ü—ñ–Ω–∞–º–∏"""
    keyboard = []
    # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –∑–∞–¥–∞–Ω–æ, –±–µ—Ä–µ–º–æ –ª–∏—à–µ –π–æ–≥–æ —Å–µ—Ä–≤—ñ—Å–∏, —ñ–Ω–∞–∫—à–µ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø–µ—Ä—à–æ–≥–æ –º—ñ—Å—Ç–∞
    if city and city in famaly_trip:
        services = famaly_trip[city]
    else:
        # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –ø–µ—Ä—à–æ–≥–æ –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤)
        services = next(iter(famaly_trip.values()))
    for service, price in services.items():
        button_text = f"{service} - {price} –≥—Ä–Ω"
        keyboard.append([KeyboardButton(button_text)])
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_location_keyboard(event_type: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ª–æ–∫–∞—Ü—ñ—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü—ñ–π –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        locations = LOCATIONS.get(event_type, [])
        if not locations:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü—ñ–π –¥–ª—è —Ç–∏–ø—É –ø–æ–¥—ñ—ó: {event_type}")
            locations = ['üìç –Ü–Ω—à–µ']  # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = []
        for i in range(0, len(locations), 2):
            row = [KeyboardButton(locations[i])]
            if i + 1 < len(locations):
                row.append(KeyboardButton(locations[i + 1]))
            keyboard.append(row)
        
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ª–æ–∫–∞—Ü—ñ–π: {str(e)}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)
    
    

def create_theme_details_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–∏"""
    try:
        keyboard = [
            [KeyboardButton("üí∞ –¶—ñ–Ω–∏")],
            [KeyboardButton(BACK_BUTTON)]
        ]
        logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É theme_details_keyboard")
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ theme_details_keyboard: {str(e)}")
        raise

def create_format_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É —Å–≤—è—Ç–∞"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        keyboard = []
        for format_name in EVENT_FORMATS.keys():
            keyboard.append([KeyboardButton(format_name)])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—ñ–≤: {str(e)}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)
            

def create_hourly_price_keyboard(city: str, event_type: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ü—ñ–Ω–∏"""
    try:
        keyboard = []
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ —Ç–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        prices = HOURLY_PRICES[city][event_type]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —Ü—ñ–Ω–∞–º–∏
        for price_name, price_value in prices.items():
            keyboard.append([KeyboardButton(f"{price_name}: {price_value} –≥—Ä–Ω")])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        keyboard.append([KeyboardButton(CONTACT_MANAGER_BUTTON)])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö —Ü—ñ–Ω: {str(e)}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_package_keyboard(city: str, event_type: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É"""
    try:
        keyboard = []
        packages = PAKET_PRICES[city][event_type].keys()
        
        for package in packages:
            keyboard.append([KeyboardButton(package)])
            
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–∞–∫–µ—Ç—ñ–≤: {str(e)}")
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_qwest_keyboard(city: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–≤–µ—Å—Ç–∞–º–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞"""
    try:
        keyboard = []
        qwests = QWEST.get(city, {})
        
        for qwest_name in qwests.keys():
            keyboard.append([KeyboardButton(qwest_name)])
            
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∫–≤–µ—Å—Ç—ñ–≤: {str(e)}")
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_qwest_duration_keyboard(qwest_name: str, city: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∫–≤–µ—Å—Ç—É"""
    try:
        keyboard = []
        durations = QWEST[city][qwest_name].keys()
        
        for duration in durations:
            price = QWEST[city][qwest_name][duration]
            keyboard.append([KeyboardButton(f"{duration} - {price} –≥—Ä–Ω")])
            
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∫–≤–µ—Å—Ç—É: {str(e)}")
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_final_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É"""
    keyboard = [
        [KeyboardButton(WOW_BUTTON)],
        [KeyboardButton(BACK_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_selected_services_keyboard(context: ContextTypes.DEFAULT_TYPE, city: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    keyboard = []
    
    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —è–∫ –∫–Ω–æ–ø–∫–∏
    if 'additional_services' in context.user_data:
        for service, option in context.user_data['additional_services'].items():
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"‚ùå {service}: {option}"
            keyboard.append([KeyboardButton(button_text)])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_additional_services_keyboard(city: str, context: ContextTypes.DEFAULT_TYPE = None) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥"""
    try:
        keyboard = []
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥–∏ –∑ –ø—ñ–¥–º–µ–Ω—é
        if city in ADDITIONAL_SERVICES_WITH_SUBMENU:
            services = ADDITIONAL_SERVICES_WITH_SUBMENU[city].keys()
            for service in services:
                keyboard.append([KeyboardButton(service)])
            
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏
        if city in ADDITIONAL_SERVICES_SINGLE:
            simple_services = ADDITIONAL_SERVICES_SINGLE[city].items()
            for service, price in simple_services:
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ü—ñ–Ω—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
                if isinstance(price, str):
                    price_text = price
                else:
                    price_text = f"{price} –≥—Ä–Ω"
                keyboard.append([KeyboardButton(f"{service} - {price_text}")])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        if context and context.user_data.get('additional_services'):
            keyboard.append([KeyboardButton(SHOW_SELECTED_SERVICES_BUTTON)])
        keyboard.append([KeyboardButton(NEXT_BUTTON)])
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥: {str(e)}")
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_service_options_keyboard(city: str, service: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ–π –ø–æ—Å–ª—É–≥–∏"""
    try:
        keyboard = []
        options = ADDITIONAL_SERVICES_WITH_SUBMENU[city][service]
        
        for option, price in options.items():
            if isinstance(price, str):
                price_text = price
            else:
                price_text = f"{price} –≥—Ä–Ω"
            keyboard.append([KeyboardButton(f"{option} - {price_text}")])
            
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –æ–ø—Ü—ñ–π –ø–æ—Å–ª—É–≥–∏: {str(e)}")
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_district_keyboard(city: str) -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–∞–π–æ–Ω–∞–º–∏ –º—ñ—Å—Ç–∞"""
    try:
        keyboard = []
        districts = TAXI_PRICES[city].keys()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É (–ø–æ 2 –≤ —Ä—è–¥–∫—É)
        current_row = []
        for district in districts:
            if district != '–Ü–Ω—à–µ':  # –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ä–∞–π–æ–Ω–∏, –∫—Ä—ñ–º '–Ü–Ω—à–µ'
                current_row.append(KeyboardButton(district))
                if len(current_row) == 2:
                    keyboard.append(current_row)
                    current_row = []
        
        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–µ–ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫, —è–∫—â–æ –≤—ñ–Ω —î
        if current_row:
            keyboard.append(current_row)
            
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–Ü–Ω—à–µ" –≤ –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫
        keyboard.append([KeyboardButton('–Ü–Ω—à–µ')])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(BACK_BUTTON)])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ä–∞–π–æ–Ω—ñ–≤: {str(e)}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True)

def create_summary_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üìÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —á–∞—Å/–¥–∞—Ç—É")],
        [KeyboardButton(BACK_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def calculate_total_price(context: ContextTypes.DEFAULT_TYPE) -> tuple[int, list[str]]:
    """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Ç–∞ —Ñ–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–∏–±–æ—Ä—ñ–≤"""
    total_price = 0
    price_details = []
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        choices = context.user_data.get('choices', [])
        city = next((choice['value'] for choice in choices if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω—É –∑–∞ –æ—Å–Ω–æ–≤–Ω—É –ø–æ—Å–ª—É–≥—É (–∫–≤–µ—Å—Ç, –ø–∞–∫–µ—Ç –∞–±–æ –ø–æ–≥–æ–¥–∏–Ω–Ω–∞ –æ–ø–ª–∞—Ç–∞)
        for choice in choices:
            if choice['type'] == '–ö–≤–µ—Å—Ç':
                import re
                city = next((c['value'] for c in choices if c['type'] == "–ú—ñ—Å—Ç–æ"), None)
                
                try:
                    match = re.match(r"(.+?\(.*?\))\s*\((.*?)\)$", choice['value'])
                    if match:
                        quest_name = match.group(1).strip()
                        duration = match.group(2).strip()
                        price = QWEST[city][quest_name][duration]
                        total_price += price
                        price_details.append(f"üéÆ –ö–≤–µ—Å—Ç '{quest_name}' ({duration}): {price} –≥—Ä–Ω")
                    else:
                        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∫–≤–µ—Å—Ç: {choice['value']}")
                        price_details.append(f"üéÆ –ö–≤–µ—Å—Ç '{choice['value']}': –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –∫–≤–µ—Å—Ç—É: {str(e)}")
                    price_details.append(f"üéÆ –ö–≤–µ—Å—Ç '{choice['value']}': –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è")
                    
            elif choice['type'] == '–ü–∞–∫–µ—Ç':
                try:
                    event_type = next((c['value'] for c in choices if c['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
                    if event_type:
                        price = PAKET_PRICES[city][event_type][choice['value']]
                        if isinstance(price, (int, float)):
                            total_price += price
                            price_details.append(f"üì¶ –ü–∞–∫–µ—Ç '{choice['value']}': {price} –≥—Ä–Ω")
                        else:
                            price_details.append(f"üì¶ –ü–∞–∫–µ—Ç '{choice['value']}': {price}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –ø–∞–∫–µ—Ç—É: {str(e)}")
                    price_details.append(f"üì¶ –ü–∞–∫–µ—Ç '{choice['value']}': –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è")
                    
            elif choice['type'] == '–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞':
                try:
                    price_info = choice['value'].split(' - ')
                    price_value = price_info[1]
                    if '–≥—Ä–Ω' in price_value:
                        try:
                            price = int(price_value.split()[0])
                            total_price += price
                            price_details.append(f"‚è∞ {price_info[0]}: {price} –≥—Ä–Ω")
                        except ValueError:
                            price_details.append(f"‚è∞ {price_info[0]}: {price_value}")
                    else:
                        price_details.append(f"‚è∞ {price_info[0]}: {price_value}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ü—ñ–Ω–∏: {str(e)}")
                    price_details.append(f"‚è∞ –ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞: –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è")
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω–∏ –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏
        if 'additional_services' in context.user_data:
            for service, option in context.user_data['additional_services'].items():
                try:
                    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É: –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∑ "–≥—Ä–Ω" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "4000 –≥—Ä–Ω")
                    if isinstance(option, str) and option.strip().endswith('–≥—Ä–Ω') and option.strip().replace(' –≥—Ä–Ω', '').replace(' ', '').isdigit():
                        price = int(option.strip().split()[0])
                        total_price += price
                        price_details.append(f"‚ûï {service}: {option}")
                    elif ' - ' in option:
                        # –î–ª—è —à–æ—É —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ—Å–ª—É–≥ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "–ù–ê–ó–í–ê - –¶–Ü–ù–ê"
                        price_str = option.split(' - ')[1]
                        if '–≥—Ä–Ω' in price_str:
                            try:
                                price = int(price_str.split()[0])
                                total_price += price
                                price_details.append(f"‚ûï {service}: {option}")
                            except ValueError:
                                price_details.append(f"‚ûï {service}: {option}")
                        else:
                            price_details.append(f"‚ûï {service}: {option}")
                    else:
                        # –î–ª—è –º–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ—Å–ª—É–≥ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "–ù–ê–ó–í–ê - –î–ï–¢–ê–õ–Ü - –¶–Ü–ù–ê"
                        try:
                            # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
                            parts = option.split(' - ')
                            if len(parts) >= 2:
                                # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É —è–∫ —Ü—ñ–Ω—É
                                price_str = parts[-1]
                                if '–≥—Ä–Ω' in price_str:
                                    price = int(price_str.split()[0])
                                    total_price += price
                            price_details.append(f"‚ûï {service}: {option}")
                        except Exception as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –¥–ª—è {service}: {str(e)}")
                            price_details.append(f"‚ûï {service}: {option}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏: {str(e)}")
                    price_details.append(f"‚ûï {service}: {option}")
        
        # –î–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫—Å—ñ
        district = next((choice['value'] for choice in choices if choice['type'] == "–†–∞–π–æ–Ω"), None)
        if district and city:
            try:
                taxi_price = TAXI_PRICES[city][district]
                if isinstance(taxi_price, (int, float)):
                    total_price += taxi_price
                    price_details.append(f"üöï –¢–∞–∫—Å—ñ ({district}): {taxi_price} –≥—Ä–Ω")
                else:
                    price_details.append(f"üöï –¢–∞–∫—Å—ñ ({district}): {taxi_price}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ —Ç–∞–∫—Å—ñ: {str(e)}")
                price_details.append(f"üöï –¢–∞–∫—Å—ñ ({district}): –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è")
        
        return total_price, price_details
        
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω–∏: {str(e)}")
        return 0, ["‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ"]

# ============================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô
# ============================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    logger.info(f"[START] –í–∏–∫–ª–∏–∫–∞–Ω–æ start –¥–ª—è user_id={update.effective_user.id}, state={context.user_data}")
    user = update.effective_user
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
    context.user_data.clear()
    for key in ['choices', 'selected_city', 'additional_services', 'selected_service']:
        if key in context.user_data:
            del context.user_data[key]
    user_data.clear_conversation_state(user.id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    old_user = user_data.get_user(user.id)
    old_phone = old_user.get('phone_number') if old_user else None
    old_device_info = old_user.get('device_info') if old_user else None
    old_visits = old_user.get('visits', 0) if old_user else 0
    old_order_count = old_user.get('order_count', 0) if old_user else 0
    visits = old_visits + 1
    user_info = get_unified_user_info(user, old_user, update)
    user_info['visits'] = visits
    user_data.add_user(user.id, user_info)
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardRemove()
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await update.message.reply_text(
        Hello_World,
        reply_markup=create_city_keyboard()
    )
    logger.info(f"[START] –ó–∞–≤–µ—Ä—à–µ–Ω–æ start –¥–ª—è user_id={update.effective_user.id}")
    return CHOOSING_CITY

async def city_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city = update.message.text
    
    if city not in CITIES:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
    add_choice(context, "–ú—ñ—Å—Ç–æ", city)
    context.user_data['selected_city'] = city  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    logger.info(f"[DEBUG] –ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞: {context.user_data.get('choices')}")
    await save_state(update, context, CHOOSING_EVENT_TYPE)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —è–∫—É –ø–æ–¥—ñ—é –±—É–¥–µ—Ç–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
        reply_markup=create_event_type_keyboard()
    )
    
    return CHOOSING_EVENT_TYPE

async def event_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
    try:
        event_type = update.message.text
        
        if event_type == BACK_BUTTON:
            remove_choice_by_type(context, '–ú—ñ—Å—Ç–æ') 
            remove_choice_by_type(context, '–¢–∏–ø –ø–æ–¥—ñ—ó')  
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–Ω–æ–≤—É:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≥—ñ–ª–æ–∫
        if 'üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π' in event_type:
            city = next((choice['value'] for choice in context.user_data.get('choices', []) 
                        if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            
            if not city:
                await update.message.reply_text(
                    "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
                
            channel_link = CITY_CHANNELS[city]
            await update.message.reply_text(
                f"üìÖ –ê—Ñ—ñ—à–∞ –ø–æ–¥—ñ–π —É –º—ñ—Å—Ç—ñ {city}\n"
                f"–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π:\n"
                f"{channel_link}",
                reply_markup=create_event_type_keyboard()
            )
            return CHOOSING_EVENT_TYPE
        
        elif 'üéØ –Ü–Ω—à–µ' in event_type:
            city = next((choice['value'] for choice in context.user_data.get('choices', []) 
                if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            add_choice(context, "–¢–∏–ø –ø–æ–¥—ñ—ó", event_type)  # –î–æ–¥–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫!
            await update.message.reply_text(
                GENERAL_INFO[city],
                reply_markup=create_other_keyboard()
            )
            return CHOOSING_EVENT_TYPE_inshe
        
        elif 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°—ñ–º–µ–π–Ω–µ —Å–≤—è—Ç–æ' in event_type:
            city = next((choice['value'] for choice in context.user_data.get('choices', []) 
                        if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            
            if not city:
                await update.message.reply_text(
                    "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
                
            from config import FAMILY_INFO, FAMALY_TRIP
            add_choice(context, "–¢–∏–ø –ø–æ–¥—ñ—ó", event_type)
            await update.message.reply_text(
                FAMILY_INFO,
                reply_markup=create_sim_svjata_keyboard_with_back(FAMALY_TRIP, city)
            )
            return CHOOSING_EVENT_TYPE_Sim_svjata
        
        # –î–ª—è –î–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –í–∏–ø—É—Å–∫–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
        elif 'üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è' in event_type or 'üéì –í–∏–ø—É—Å–∫–Ω–∏–π' in event_type:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–¥—ñ–π
            add_choice(context, "–¢–∏–ø –ø–æ–¥—ñ—ó", event_type)
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                reply_markup=create_location_keyboard(event_type)
            )
            return CHOOSING_LOCATION
        
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE

async def event_type_chosen_inshe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ –ø–µ—Ä—à–æ–º—É —Ä—ñ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª—É '–Ü–Ω—à–µ'"""
    try:
        user_choice = update.message.text
        city = next((choice['value'] for choice in context.user_data.get('choices', []) 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        event_type = next((choice['value'] for choice in context.user_data.get('choices', []) 
                          if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
        
        if not city or not event_type:
            logger.error("–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        if user_choice == BACK_BUTTON:
            remove_choice_by_type(context, '–¢–∏–ø –ø–æ–¥—ñ—ó')
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —è–∫—É –ø–æ–¥—ñ—é –±—É–¥–µ—Ç–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                reply_markup=create_event_type_keyboard()
            )
            return CHOOSING_EVENT_TYPE

        elif user_choice == CONTACT_MANAGER_BUTTON:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º—ñ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if not city or city not in MANAGER_INFO or city not in MANAGER_CONTACT_MESSAGES:
                await update.message.reply_text(
                    "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = MANAGER_INFO[city]
            message = MANAGER_CONTACT_MESSAGES[city].format(
                phone=manager['phone'],
                name=manager['name'],
                telegram=manager['telegram']
            )
            await update.message.reply_text(
                message,
                reply_markup=create_other_keyboard()
            )
            return CHOOSING_EVENT_TYPE_inshe
        
        # elif user_choice == "üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
        #     await update.message.reply_text(
        #         "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
        #         reply_markup=create_location_keyboard(user_choice)
        #     )
        #     return CHOOSING_LOCATION

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–Ü–Ω—à–µ': {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_other_keyboard()
        )
        return CHOOSING_EVENT_TYPE_inshe

async def event_type_chosen__Sim_svjata(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó –¥–ª—è —Å–≤—è—Ç–∫–æ–≤–∏—Ö –ø–æ–¥—ñ–π"""
    text = update.message.text
    
    if text == BACK_BUTTON:
        remove_choice_by_type(context, '–¢–∏–ø –ø–æ–¥—ñ—ó')
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó –∑–Ω–æ–≤—É:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE

    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—Å—ñ—Ö –ø–æ—Å–ª—É–≥ —ñ–∑ FAMALY_TRIP
    famaly_services = [f"{service} - {price} –≥—Ä–Ω" for city_services in FAMALY_TRIP.values() for service, price in city_services.items()]
    if text in famaly_services:
        add_choice(context, '–î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–ø—Ü—ñ—è —Å—ñ–º–µ–π–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏', text)
        context.user_data['service'] = text
        # –ú—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó (–∑ choices)
        if 'city' not in context.user_data:
            city = next((choice['value'] for choice in context.user_data.get('choices', []) if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            if city is None:
                city = '–ù–µ–≤—ñ–¥–æ–º–æ'
            context.user_data['city'] = city
        if 'event_type' not in context.user_data:
            event_type = next((choice['value'] for choice in context.user_data.get('choices', []) if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
            if event_type is None:
                event_type = '–ù–µ–≤—ñ–¥–æ–º–æ'
            context.user_data['event_type'] = event_type
        await update.message.reply_text(
            FAMILY_INFO_INFO2,
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(CONTACT_MANAGER_BUTTON)],
                [KeyboardButton(BACK_BUTTON)]
            ], resize_keyboard=True)
        )
        return FFMILY_DOP
    else:
    # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å–∏–º–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(option)] for option in famaly_services] + [[KeyboardButton(BACK_BUTTON)]],
                resize_keyboard=True
            )
        )
        return CHOOSING_EVENT_TYPE_Sim_svjata
    
    
    # elif text == "üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
    #     await update.message.reply_text(
    #         "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
    #         reply_markup=create_location_keyboard(text)
    #     )
    #     return CHOOSING_LOCATION
    
    # elif text == "üéì –í–∏–ø—É—Å–∫–Ω–∏–π":
    #     await update.message.reply_text(
    #         "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
    #         reply_markup=create_location_keyboard(text)
    #     )
    #     return CHOOSING_LOCATION

async def family_dop_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –æ–ø—Ü—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–æ–≥–æ —Å–≤—è—Ç–∞ : –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' —ñ '–ù–∞–∑–∞–¥'."""
        text = update.message.text
        add_choice(context, '–î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–ø—Ü—ñ—è —Å—ñ–º–µ–π–Ω–æ–≥–æ —Å–≤—è—Ç–∞', text)
        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton(CONTACT_MANAGER_BUTTON)],
            [KeyboardButton(BACK_BUTTON)]
        ], resize_keyboard=True)
        text = update.message.text
        if text == CONTACT_MANAGER_BUTTON:
            # –ó–±–∏—Ä–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            # –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º—ñ—Å—Ç–æ, —Ç–∏–ø –ø–æ–¥—ñ—ó, –ø–æ—Å–ª—É–≥—É —è–∫—â–æ —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
            if 'city' not in context.user_data:
                city = next((choice['value'] for choice in context.user_data.get('choices', []) if choice['type'] == "–ú—ñ—Å—Ç–æ"), '–ù–µ–≤—ñ–¥–æ–º–æ')
                context.user_data['city'] = city
            if 'event_type' not in context.user_data:
                event_type = next((choice['value'] for choice in context.user_data.get('choices', []) if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), '–ù–µ–≤—ñ–¥–æ–º–æ')
                context.user_data['event_type'] = event_type
            if 'service' not in context.user_data:
                context.user_data['service'] = text
            user = update.effective_user
            city = context.user_data.get('city', '–ù–µ–≤—ñ–¥–æ–º–æ')
            event_type = context.user_data.get('event_type', '–°—ñ–º–µ–π–Ω–µ —Å–≤—è—Ç–æ')
            service = context.user_data.get('service', text)
            order_message = (
                f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—ñ–º–µ–π–Ω–µ —Å–≤—è—Ç–æ!\n"
                f"–ú—ñ—Å—Ç–æ: {city}\n"
                f"–¢–∏–ø –ø–æ–¥—ñ—ó: {event_type}\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
                f"–Ü–º'—è: {user.full_name}\n"
                f"Username: @{user.username if user.username else '–Ω–µ–º–∞—î'}\n"
                f"User ID: {user.id}\n\n"
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ —Å–≤—è—Ç–∞\n"
            )
            await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=order_message)
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await update.message.reply_text(
                "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton('üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)],
                    [KeyboardButton('‚¨ÖÔ∏è –ù–∞ –ø–æ—á–∞—Ç–æ–∫')]
                ], resize_keyboard=True)
            )
            return PHONE_CONTACT
            
        elif text == BACK_BUTTON:
            city = context.user_data.get('city', '–ù–µ–≤—ñ–¥–æ–º–æ')
            await update.message.reply_text(
                FAMILY_INFO,
                reply_markup=create_sim_svjata_keyboard_with_back(FAMALY_TRIP, city)
            )   
            return CHOOSING_EVENT_TYPE_Sim_svjata
        else:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(CONTACT_MANAGER_BUTTON)],
                    [KeyboardButton(BACK_BUTTON)]
                ], resize_keyboard=True)
            )
            return FFMILY_DOP


    
async def event_type_chosen_afisha(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ–¥—ñ—ó –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–¥—ñ–π"""
    text = update.message.text
    
    if text == BACK_BUTTON:
        remove_choice_by_type(context, '–¢–∏–ø –ø–æ–¥—ñ—ó')
        remove_choice_by_type(context, '–ú—ñ—Å—Ç–æ')
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–¥—ñ—ó –∑–Ω–æ–≤—É:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
async def location_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó"""
    try:
        location = update.message.text
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó
        event_type = None
        for choice in reversed(user_choices):
            if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó":
                event_type = choice['value']
                break
                
        city = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        
        if not city or not event_type:
            logger.error(f"–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –¢–∏–ø –ø–æ–¥—ñ—ó: {event_type}, –ú—ñ—Å—Ç–æ: {city}")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        if location == BACK_BUTTON:
            remove_choice_by_type(context, '–õ–æ–∫–∞—Ü—ñ—è')
            remove_choice_by_type(context, '–¢–∏–ø –ø–æ–¥—ñ—ó')
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —è–∫—É –ø–æ–¥—ñ—é –±—É–¥–µ—Ç–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                reply_markup=create_event_type_keyboard()
            )
            return CHOOSING_EVENT_TYPE

        if location == 'üìç –Ü–Ω—à–µ':
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É "–Ü–Ω—à–µ"
            keyboard = [
                [KeyboardButton(SUGGEST_LOCATION_BUTTON)],
                [KeyboardButton(CONTACT_MANAGER_BUTTON)],
                [KeyboardButton(BACK_BUTTON)]
            ]
            await update.message.reply_text(
                "–ß–∏–º —Å–∞–º–µ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return CHOOSING_LOCATION_inshe

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        available_locations = LOCATIONS.get(event_type, [])
        if not available_locations:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü—ñ–π –¥–ª—è —Ç–∏–ø—É –ø–æ–¥—ñ—ó: {event_type}")
            available_locations = ['üìç –Ü–Ω—à–µ']  # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç

        if location not in available_locations:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:",
                reply_markup=create_location_keyboard(event_type)
            )
            return CHOOSING_LOCATION

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
        add_choice(context, "–õ–æ–∫–∞—Ü—ñ—è", location)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é
        location_info = LOCATION_INFO.get(city, {}).get(location, "–í–∏–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è")
        await update.message.reply_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü—ñ—é: {location}\n\n{location_info}\n\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É —Å–≤—è—Ç–∞:",
            reply_markup=create_theme_keyboard()
        )
        return CHOOSING_THEME

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    
async def location_chosen_inshe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–Ü–Ω—à–µ' (–ª–æ–∫–∞—Ü—ñ—ó)"""
    try:
        user_choice = update.message.text
        city = next((choice['value'] for choice in context.user_data.get('choices', []) 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        event_type = next((choice['value'] for choice in context.user_data.get('choices', []) 
                          if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
        
        if not city or not event_type:
            logger.error("–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        if user_choice == BACK_BUTTON:
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                reply_markup=create_location_keyboard(event_type)
            )
            return CHOOSING_LOCATION

        elif user_choice == CONTACT_MANAGER_BUTTON:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º—ñ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if not city or city not in MANAGER_INFO or city not in MANAGER_CONTACT_MESSAGES:
                await update.message.reply_text(
                    "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = MANAGER_INFO[city]
            message = MANAGER_CONTACT_MESSAGES[city].format(
                phone=manager['phone'],
                name=manager['name'],
                telegram=manager['telegram']
            )
            await update.message.reply_text(
                message,
                reply_markup=create_location_keyboard(event_type)
            )
            return CHOOSING_LOCATION

        elif user_choice == SUGGEST_LOCATION_BUTTON:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ PDF –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏
            pdf_path = LOCATION_PDF_FILES.get(city)
            if pdf_path and os.path.exists(pdf_path):
                with open(pdf_path, 'rb') as file:
                    await update.message.reply_document(
                        document=file,
                        caption=f"üìç –ü—ñ–¥–∫–∞–∑–∫–∏ —â–æ–¥–æ –º—ñ—Å—Ü—å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —É –º—ñ—Å—Ç—ñ {city}",
                        reply_markup=create_location_keyboard(event_type)
                    )
            else:
                await update.message.reply_text(
                    "–ù–∞ –∂–∞–ª—å, —Ñ–∞–π–ª –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. "
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
                    reply_markup=create_location_keyboard(event_type)
                )
            return CHOOSING_LOCATION

        return CHOOSING_LOCATION_inshe

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–Ü–Ω—à–µ': {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_location_keyboard(event_type)
        )
        return CHOOSING_LOCATION_inshe

async def theme_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–µ–º–∞—Ç–∏–∫–∏ —Å–≤—è—Ç–∞"""
    try:
        theme = update.message.text
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó —Ç–∞ –º—ñ—Å—Ç–æ
        event_type = None
        for choice in reversed(user_choices):
            if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó":
                event_type = choice['value']
                break
                
        city = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        
        if not city or not event_type:
            logger.error(f"–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –¢–∏–ø –ø–æ–¥—ñ—ó: {event_type}, –ú—ñ—Å—Ç–æ: {city}")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        if theme == BACK_BUTTON:
            remove_choice_by_type(context, '–¢–µ–º–∞—Ç–∏–∫–∞')
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω—É –ª–æ–∫–∞—Ü—ñ—é
            last_location = next((choice['value'] for choice in reversed(user_choices) 
                                if choice['type'] == "–õ–æ–∫–∞—Ü—ñ—è"), None)
            if last_location:
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                    reply_markup=create_location_keyboard(event_type)
                )
            else:
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
                    reply_markup=create_location_keyboard(event_type)
                )
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
            remove_choice_by_type(context, '–õ–æ–∫–∞—Ü—ñ—è')
            return CHOOSING_LOCATION

        if theme == 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = MANAGER_INFO[city]
            message = MANAGER_CONTACT_MESSAGES[city].format(
                phone=manager['phone'],
                name=manager['name'],
                telegram=manager['telegram']
            )
            await update.message.reply_text(
                message,
                reply_markup=create_theme_keyboard()
            )
            return CHOOSING_THEME

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–±—Ä–∞–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if theme not in THEMES:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –∑—ñ —Å–ø–∏—Å–∫—É:",
                reply_markup=create_theme_keyboard()
            )
            return CHOOSING_THEME

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ (–∑–∞–º—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —â–µ –æ–¥–Ω—ñ—î—ó, –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é)
        remove_choice_by_type(context, "–¢–µ–º–∞—Ç–∏–∫–∞")
        add_choice(context, "–¢–µ–º–∞—Ç–∏–∫–∞", theme)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–º–∞—Ç–∏–∫—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–µ–º–∏
        theme_info = THEME_INFO.get(theme, "")
        await update.message.reply_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É: {theme}\n\n{theme_info}\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É:",
            reply_markup=create_theme2_keyboard(theme, city)
        )
        return CHOOSING_THEME2

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É —Ç–µ–º–∞—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_theme_keyboard()
        )
        return CHOOSING_THEME

async def theme2_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏"""
    try:
        subtheme = update.message.text
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É
        theme = next((choice['value'] for choice in reversed(user_choices) 
                     if choice['type'] == "–¢–µ–º–∞—Ç–∏–∫–∞"), None)
        
        if not theme:
            logger.error("–¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É:",
                reply_markup=create_theme_keyboard()
            )
            return CHOOSING_THEME

        if subtheme == BACK_BUTTON:
            remove_choice_by_type(context, '–ü—ñ–¥—Ç–µ–º–∞')
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É:",
                reply_markup=create_theme_keyboard()
            )
            return CHOOSING_THEME

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–±—Ä–∞–Ω–∞ –ø—ñ–¥—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏
        city = next((choice['value'] for choice in user_choices if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        if not city:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ç–µ–º–∏")
            await update.message.reply_text(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ç–æ. –ü–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É.",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY
        
        available_subthemes = THEME_BTN.get(city, {}).get(theme, [])
        if subtheme not in available_subthemes:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –∑—ñ —Å–ø–∏—Å–∫—É:",
                reply_markup=create_theme2_keyboard(theme, city)
            )
            return CHOOSING_THEME2

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—ñ–¥—Ç–µ–º–∏
        add_choice(context, "–ü—ñ–¥—Ç–µ–º–∞", subtheme)
        
        # --- –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–µ–º–∏ ---
        city = next((choice['value'] for choice in user_choices if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—ñ–¥—Ç–µ–º–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º—ñ—Å—Ç–∞
        photo_url = None
        if city:
            photo_url = THEME_PHOTOS.get(city, {}).get(theme, {}).get(subtheme)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
        if photo_url:
            if os.path.exists(photo_url):
                with open(photo_url, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                        reply_markup=create_theme_details_keyboard()
                    )
            else:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                    reply_markup=create_theme_details_keyboard()
                )
        else:
            await update.message.reply_text(
                f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                reply_markup=create_theme_details_keyboard()
            )
        
        return CHOOSING_THEME_DETAILS

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ç–µ–º–∏: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_theme_keyboard()
        )
        return CHOOSING_THEME

async def theme_details_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ –¥–µ—Ç–∞–ª—è—Ö —Ç–µ–º–∏"""
    try:
        choice = update.message.text
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É —Ç–∞ –ø—ñ–¥—Ç–µ–º—É
        theme = next((choice['value'] for choice in reversed(user_choices) 
                     if choice['type'] == "–¢–µ–º–∞—Ç–∏–∫–∞"), None)
        subtheme = next((choice['value'] for choice in reversed(user_choices) 
                        if choice['type'] == "–ü—ñ–¥—Ç–µ–º–∞"), None)
        
        if not theme:
            logger.error("–¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É:",
                reply_markup=create_theme_keyboard()
            )
            return CHOOSING_THEME

        if choice == BACK_BUTTON:
            # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø—ñ–¥—Ç–µ–º—É
            remove_choice_by_type(context, '–ü—ñ–¥—Ç–µ–º–∞')
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–±–æ—Ä—ñ–≤
            user_choices = context.user_data.get('choices', [])
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ–º—É –∑–Ω–æ–≤—É
            theme = next((choice['value'] for choice in reversed(user_choices) 
                         if choice['type'] == "–¢–µ–º–∞—Ç–∏–∫–∞"), None)
            
            city = next((choice['value'] for choice in user_choices if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            if not city:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ —É theme_details_chosen")
                await update.message.reply_text(
                    "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ç–æ. –ü–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É.",
                    reply_markup=create_city_keyboard()
                )
                return CHOOSING_CITY
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É:",
                reply_markup=create_theme2_keyboard(theme, city)
            )
            return CHOOSING_THEME2
        
        if choice == "üí∞ –¶—ñ–Ω–∏":
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ü—ñ–Ω
            await update.message.reply_text(
                "üí∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü—ñ–Ω–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT

        return CHOOSING_THEME_DETAILS

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≤ –¥–µ—Ç–∞–ª—è—Ö —Ç–µ–º–∏: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_theme_keyboard()
        )
        return CHOOSING_THEME
    
async def format_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É —Å–≤—è—Ç–∞"""
    text = update.message.text
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_choices = context.user_data.get('choices', [])
    logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó
    city = next((choice['value'] for choice in user_choices 
                if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
    event_type = next((choice['value'] for choice in user_choices 
                      if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∏–±—Ä–∞–Ω—É –ª–æ–∫–∞—Ü—ñ—é
    location = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–õ–æ–∫–∞—Ü—ñ—è"), None)
    
    if text == BACK_BUTTON:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–º–∏
        theme = next((choice['value'] for choice in reversed(user_choices) 
                     if choice['type'] == "–¢–µ–º–∞—Ç–∏–∫–∞"), None)
        subtheme = next((choice['value'] for choice in reversed(user_choices) 
                        if choice['type'] == "–ü—ñ–¥—Ç–µ–º–∞"), None)
        
        if subtheme:
            # --- –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–µ–º–∏ (BACK_BUTTON) ---
            city = next((choice['value'] for choice in user_choices if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            photo_url = None
            if city:
                photo_url = THEME_PHOTOS.get(city, {}).get(theme, {}).get(subtheme)
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
            if photo_url:
                if os.path.exists(photo_url):
                    with open(photo_url, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption=f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                            reply_markup=create_theme_details_keyboard()
                        )
                else:
                    await update.message.reply_photo(
                        photo=photo_url,
                        caption=f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                        reply_markup=create_theme_details_keyboard()
                    )
            else:
                await update.message.reply_text(
                    f"üé® {subtheme}\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                    reply_markup=create_theme_details_keyboard()
                )
            return CHOOSING_THEME_DETAILS
        else:
            # –Ø–∫—â–æ –ø—ñ–¥—Ç–µ–º–∏ –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ç–µ–º–∏
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É:",
                reply_markup=create_theme2_keyboard(theme, city)
            )
            return CHOOSING_THEME2
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    add_choice(context, "–§–æ—Ä–º–∞—Ç", text)
    
    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    if text == "‚è∞ –ü–æ–≥–æ–¥–∏–Ω–Ω–æ":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∏–ø—É—Å–∫–Ω–∏–π –∞–±–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if event_type in ["üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "üéì –í–∏–ø—É—Å–∫–Ω–∏–π"]:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å
            is_tourbase = location and "üè∞ –ó–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å" in location
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á –¥–ª—è —Ü—ñ–Ω
            price_key = event_type
            if is_tourbase:
                price_key = f"{event_type} (—Ç—É—Ä–±–∞–∑–∞)"
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≥–æ–¥–∏–Ω–Ω—ñ —Ü—ñ–Ω–∏
            await update.message.reply_text(
                f"üí∞ –ü–æ–≥–æ–¥–∏–Ω–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {event_type} —É –º—ñ—Å—Ç—ñ {city}\n\n" + 
                ("‚ùóÔ∏è–£–í–ê–ì–ê! –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–ª—è —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è –≤ –∑–∞–º—ñ—Å—å–∫–æ–º—É –∫–æ–º–ø–ª–µ–∫—Å—ñ, –ø–µ—Ä–µ–¥–±–∞—á–∞—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–≤—è—Ç–∞ –º—ñ–Ω—ñ–º—É–º –≤—ñ–¥ –¥–≤–æ—Ö –≥–æ–¥–∏–Ω" if is_tourbase else "") + ":",
                reply_markup=create_hourly_price_keyboard(city, price_key)
            )
            return CHOOSING_HOURLY_PRICE
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
            await update.message.reply_text(
                "–î–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó –ø–æ–≥–æ–¥–∏–Ω–Ω—ñ —Ü—ñ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
    
    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    if text == "üì¶ –ü–∞–∫–µ—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∏–ø—É—Å–∫–Ω–∏–π –∞–±–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if event_type in ["üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "üéì –í–∏–ø—É—Å–∫–Ω–∏–π"]:
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞–∫–µ—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
            await update.message.reply_text(
                f"üì¶ –ü–∞–∫–µ—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è {event_type} —É –º—ñ—Å—Ç—ñ {city}:",
                reply_markup=create_package_keyboard(city, event_type)
            )
            return CHOOSING_PACKAGE
        else:
            await update.message.reply_text(
                "–î–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó –ø–∞–∫–µ—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ.",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
            
    elif text == "üéØ –ö–≤–µ—Å—Ç–∏":
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–≤–µ—Å—Ç–∏
        await update.message.reply_text(
            f"üéÆ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–≤–µ—Å—Ç–∏ —É –º—ñ—Å—Ç—ñ {city}:",
            reply_markup=create_qwest_keyboard(city)
        )
        return CHOOSING_QWEST
        
    return CHOOSING_FORMAT

async def hourly_price_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ü—ñ–Ω–∏"""
    try:
        text = update.message.text
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó
        city = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        event_type = next((choice['value'] for choice in user_choices 
                          if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∏–±—Ä–∞–Ω—É –ª–æ–∫–∞—Ü—ñ—é
        location = next((choice['value'] for choice in user_choices 
                        if choice['type'] == "–õ–æ–∫–∞—Ü—ñ—è"), None)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å
        is_tourbase = location and "üè∞ –ó–∞–º—ñ—Å—å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å" in location
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á –¥–ª—è —Ü—ñ–Ω
        price_key = event_type
        if is_tourbase:
            price_key = f"{event_type} (—Ç—É—Ä–±–∞–∑–∞)"
        
        if not city or not event_type:
            logger.error("–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        if text == BACK_BUTTON:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT

        if text == CONTACT_MANAGER_BUTTON:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = MANAGER_INFO[city]
            message = MANAGER_CONTACT_MESSAGES[city].format(
                phone=manager['phone'],
                name=manager['name'],
                telegram=manager['telegram']
            )
            await update.message.reply_text(
                message,
                reply_markup=create_hourly_price_keyboard(city, price_key)
            )
            return CHOOSING_HOURLY_PRICE

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Ü—ñ–Ω—É
        if ":" in text:
            price_name = text.split(":")[0].strip()
            price_value = text.split(":")[1].strip()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ü—ñ–Ω–∏
            add_choice(context, "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞", f"{price_name} - {price_value}")
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è –∑–∞–º—ñ—Å—å–∫–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å—É
            min_duration_info = ""
            if is_tourbase:
                min_duration_info = "\n‚ùóÔ∏è –î–ª—è –∑–∞–º—ñ—Å—å–∫–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å—É –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å - 2 –≥–æ–¥–∏–Ω–∏."
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä
            await update.message.reply_text(
                f"–í–∏ –æ–±—Ä–∞–ª–∏: {price_name}\n"
                f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {price_value}\n"
                f"{min_duration_info}\n\n"
                "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç—É   
            await update.message.reply_text(
                "–ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –≤–∞–º —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç?",
                reply_markup=create_final_keyboard()
            )
            return CHOOSING_FINAL

        return CHOOSING_HOURLY_PRICE

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ü—ñ–Ω–∏: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_format_keyboard()
        )
        return CHOOSING_FORMAT

async def package_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–∞–∫–µ—Ç—É"""
    text = update.message.text
    
    if text == BACK_BUTTON:
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ñ–æ—Ä–º–∞—Ç, —è–∫—â–æ –≤—ñ–Ω —î
        remove_choice_by_type(context, '–§–æ—Ä–º–∞—Ç')
        remove_choice_by_type(context, '–ü–∞–∫–µ—Ç')
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
            reply_markup=create_format_keyboard()
        )
        return CHOOSING_FORMAT
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_choices}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó
        city = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        event_type = next((choice['value'] for choice in user_choices 
                          if choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
        
        if not city or not event_type:
            logger.error("–ú—ñ—Å—Ç–æ –∞–±–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∏–±–æ—Ä–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await update.message.reply_text(
                "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó:",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞–∫–µ—Ç
        add_choice(context, "–ü–∞–∫–µ—Ç", text)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –ø–∞–∫–µ—Ç—É
        price = PAKET_PRICES[city][event_type][text]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç—É
        photo_path = PAKET_PHOTOS[city][event_type][text]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É
        if os.path.exists(photo_path):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç—É
            with open(photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üéâ –í–∏–±—Ä–∞–Ω–æ –ø–∞–∫–µ—Ç: {text}\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω\n\n"
                            f"–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –ø–∞–∫–µ—Ç—É –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:"
                )
        else:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ç–æ
            logger.warning(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
            await update.message.reply_text(
                f"üéâ –í–∏–±—Ä–∞–Ω–æ –ø–∞–∫–µ—Ç: {text}\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω\n\n"
                f"–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –ø–∞–∫–µ—Ç—É –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:"
            )
            
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –≤–∞–º —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç?",
            reply_markup=create_final_keyboard()
        )
        return CHOOSING_FINAL
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –ø–∞–∫–µ—Ç—É: {str(e)}")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )
        return ConversationHandler.END
    

async def qwest_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–≤–µ—Å—Ç—É"""
    try:
        text = update.message.text
        
        if text == BACK_BUTTON:
            # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ñ–æ—Ä–º–∞—Ç, —è–∫—â–æ –≤—ñ–Ω —î
            remove_choice_by_type(context, '–§–æ—Ä–º–∞—Ç')
            remove_choice_by_type(context, '–ü–∞–∫–µ—Ç')
            remove_choice_by_type(context, '–ö–≤–µ—Å—Ç')  # –î–æ–¥–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–≤–µ—Å—Ç—É
            if 'selected_qwest' in context.user_data:
                del context.user_data['selected_qwest']
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
            
        # –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ç–æ –∑ –≤–∏–±–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_choices = context.user_data.get('choices', [])
        city = next((choice['value'] for choice in user_choices 
                    if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
                    
        if not city:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ.")
            return ConversationHandler.END
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–≤–µ—Å—Ç —Ç–∞ –º—ñ—Å—Ç–æ
        context.user_data['selected_qwest'] = text
        context.user_data['selected_city'] = city
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ
        photo_path = QWEST_PHOTOS.get(text)
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ, —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üéÆ –í–∏–±—Ä–∞–Ω–æ –∫–≤–µ—Å—Ç: {text}\n\n"
                            f"–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–≤–µ—Å—Ç—É:",
                    reply_markup=create_qwest_duration_keyboard(text, city)
                )
        else:
            await update.message.reply_text(
                f"üéÆ –í–∏–±—Ä–∞–Ω–æ –∫–≤–µ—Å—Ç: {text}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–≤–µ—Å—Ç—É:",
                reply_markup=create_qwest_duration_keyboard(text, city)
            )
        return CHOOSING_QWEST_DURATION
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –∫–≤–µ—Å—Ç—É: {str(e)}")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            reply_markup=create_theme_details_keyboard()
        )
        return CHOOSING_THEME

async def qwest_duration_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∫–≤–µ—Å—Ç—É"""
    try:
        text = update.message.text
        
        if text == BACK_BUTTON:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–≤–µ—Å—Ç—É
            city = context.user_data.get('selected_city')
            if not city:
                # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ context.user_data, –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ choices
                city = next((choice['value'] for choice in user_choices 
                           if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            
            if not city:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ.")
                return ConversationHandler.END
                
            await update.message.reply_text(
                f"üéÆ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–≤–µ—Å—Ç–∏ —É –º—ñ—Å—Ç—ñ {city}:",
                reply_markup=create_qwest_keyboard(city)
            )
            return CHOOSING_QWEST
            
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
        city = context.user_data.get('selected_city')
        qwest_name = context.user_data.get('selected_qwest')
        
        if not city or not qwest_name:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
            return ConversationHandler.END
            
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ç–∞ —Ü—ñ–Ω–∏
        duration, price = text.split(" - ")
        price = int(price.split()[0])  # –í–∏–¥–∞–ª—è—î–º–æ "–≥—Ä–Ω" —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        add_choice(context, "–ö–≤–µ—Å—Ç", f"{qwest_name} ({duration})")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤–∏–±—ñ—Ä
        await update.message.reply_text(
            f"üéÆ –í–∏–±—Ä–∞–Ω–æ –∫–≤–µ—Å—Ç: {qwest_name}\n"
            f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω\n\n"
            f"–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–≤–µ—Å—Ç—É –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:"
        )
            
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –≤–∞–º —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç?",
            reply_markup=create_final_keyboard()
        )
        return CHOOSING_FINAL
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∫–≤–µ—Å—Ç—É: {str(e)}")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )
        return ConversationHandler.END

async def final_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä"""
    text = update.message.text
    
    if text == BACK_BUTTON:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
        user_choices = context.user_data.get('choices', [])
        last_choice = next((choice for choice in reversed(user_choices) 
                          if choice['type'] in ['–ö–≤–µ—Å—Ç', '–ü–∞–∫–µ—Ç', '–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞']), None)
        
        if not last_choice:
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
            
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
        remove_choice_by_type(context, last_choice['type'])
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        if last_choice['type'] == '–ö–≤–µ—Å—Ç':
            city = context.user_data.get('selected_city')
            if not city:
                # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ context.user_data, –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ choices
                city = next((choice['value'] for choice in user_choices 
                           if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            
            if not city:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ.")
                return ConversationHandler.END
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –≤ context.user_data –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            context.user_data['selected_city'] = city
                
            await update.message.reply_text(
                f"üéÆ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–≤–µ—Å—Ç–∏ —É –º—ñ—Å—Ç—ñ {city}:",
                reply_markup=create_qwest_keyboard(city)
            )
            return CHOOSING_QWEST
        elif last_choice['type'] == '–ü–∞–∫–µ—Ç':
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
        elif last_choice['type'] == '–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞':
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
            
    elif text == WOW_BUTTON:
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—Å–ª—É–≥
        city = context.user_data.get('selected_city')
        if not city:
            # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ context.user_data, –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ choices
            user_choices = context.user_data.get('choices', [])
            city = next((choice['value'] for choice in user_choices 
                        if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
            
            if not city:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ.")
                return ConversationHandler.END
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –≤ context.user_data –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            context.user_data['selected_city'] = city
            
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:",
            reply_markup=create_additional_services_keyboard(city, context)
        )
        return CHOOSING_ADDITIONAL_SERVICES
        
    return CHOOSING_FINAL

async def additional_services_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏"""
    try:
        text = update.message.text
        city = context.user_data.get('selected_city')
        
        # –õ–æ–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç: {text}")
        logger.info(f"–ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ: {city}")
        logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω context.user_data: {context.user_data}")
        
        if not city:
            logger.warning("–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ context.user_data")
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ.",
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY
        
        if text == BACK_BUTTON:
            logger.info("–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î")
            # –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥
            if context.user_data.get('removing_services'):
                logger.info("–í–∏—Ö–æ–¥–∏–º–æ –∑ —Ä–µ–∂–∏–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥")
                del context.user_data['removing_services']
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:",
                    reply_markup=create_additional_services_keyboard(city, context)
                )
                return CHOOSING_ADDITIONAL_SERVICES
            # –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ—ó –ø–æ—Å–ª—É–≥–∏
            elif 'selected_service' in context.user_data:
                logger.info(f"–í–∏–¥–∞–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω—É –ø–æ—Å–ª—É–≥—É: {context.user_data['selected_service']}")
                del context.user_data['selected_service']
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:",
                    reply_markup=create_additional_services_keyboard(city, context)
                )
                return CHOOSING_ADDITIONAL_SERVICES
            # –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥
            else:
                logger.info("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞ –æ—á–∏—â—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏")
                # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏
            if 'additional_services' in context.user_data:
                logger.info(f"–í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {context.user_data['additional_services']}")
                del context.user_data['additional_services']
                # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ –≤–∏–±–æ—Ä–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ '–§–æ—Ä–º–∞—Ç'
                choices = context.user_data.get('choices', [])
                last_format_idx = None
                for i in range(len(choices)-1, -1, -1):
                    if choices[i]['type'] == '–§–æ—Ä–º–∞—Ç':
                        last_format_idx = i
                        break
                if last_format_idx is not None:
                    context.user_data['choices'] = choices[:last_format_idx]
                # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω—ñ –∫–ª—é—á—ñ
                for k in ['selected_qwest', 'selected_paket', 'selected_hourly']:
                    if k in context.user_data:
                        del context.user_data[k]
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–≤—è—Ç–∞:",
                reply_markup=create_format_keyboard()
            )
            return CHOOSING_FORMAT
            
        # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏"
        if text == SHOW_SELECTED_SERVICES_BUTTON:
            logger.info("–ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥")
            context.user_data['removing_services'] = True
            await update.message.reply_text(
                "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
                reply_markup=create_selected_services_keyboard(context, city)
            )
            return CHOOSING_ADDITIONAL_SERVICES
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏
        if text.startswith("‚ùå ") and context.user_data.get('removing_services'):
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å ‚ùå —Ç–∞ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Å–µ—Ä–≤—ñ—Å —ñ –æ–ø—Ü—ñ—é
            service = text[2:].split(":")[0].strip()
            logger.info(f"–í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–ª—É–≥—É: {service}")
            
            if 'additional_services' in context.user_data and service in context.user_data['additional_services']:
                del context.user_data['additional_services'][service]
                logger.info(f"–ü–æ—Å–ª—É–≥—É {service} –≤–∏–¥–∞–ª–µ–Ω–æ")
                
                # –Ø–∫—â–æ –≤—Å—ñ –ø–æ—Å–ª—É–≥–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ–Ω—é
                if not context.user_data['additional_services']:
                    del context.user_data['additional_services']
                    del context.user_data['removing_services']
                    await update.message.reply_text(
                        "–í—Å—ñ –ø–æ—Å–ª—É–≥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:",
                        reply_markup=create_additional_services_keyboard(city, context)
                    )
                else:
                    await update.message.reply_text(
                        f"–ü–æ—Å–ª—É–≥—É {service} –≤–∏–¥–∞–ª–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
                        reply_markup=create_selected_services_keyboard(context, city)
                    )
                return CHOOSING_ADDITIONAL_SERVICES
            
        if text == NEXT_BUTTON:
            logger.info("[ADDITIONAL_SERVICES] –ù–∞—Ç–∏—Å–Ω—É—Ç–æ '–î–∞–ª—ñ'.")
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–æ—Å–ª—É–≥
            if 'additional_services' not in context.user_data:
                logger.warning("[ADDITIONAL_SERVICES] –í–∏–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
                message = "‚ùóÔ∏è –í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏.\n\n"
            else:
                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏
                message = "üéâ –í–∞—à—ñ –≤–∏–±—Ä–∞–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:\n\n"
                for service, option in context.user_data['additional_services'].items():
                    message += f"‚Ä¢ {service}: {option}\n"
            
            message += "\nüöï –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–∞–π–æ–Ω –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–∞–∫—Å—ñ:"
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–∞–π–æ–Ω–∞–º–∏
            await update.message.reply_text(
                message,
                reply_markup=create_district_keyboard(city)
            )
            return CHOOSING_DISTRICT
            
        # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –ø–æ—Å–ª—É–≥—É –∑ –ø—ñ–¥–º–µ–Ω—é
        if city in ADDITIONAL_SERVICES_WITH_SUBMENU and text in ADDITIONAL_SERVICES_WITH_SUBMENU[city]:
            logger.info(f"[ADDITIONAL_SERVICES] –í–∏–±—Ä–∞–Ω–æ –ø–æ—Å–ª—É–≥—É –∑ –ø—ñ–¥–º–µ–Ω—é: {text}")
            await update.message.reply_text(
                f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–æ—Å–ª—É–≥–∏ '{text}':",
                reply_markup=create_service_options_keyboard(city, text)
            )
            context.user_data['selected_service'] = text
            logger.info(f"[ADDITIONAL_SERVICES] –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∏–±—Ä–∞–Ω—É –ø–æ—Å–ª—É–≥—É: {text}")
            return CHOOSING_SERVICE_OPTION
            
        # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –ø—Ä–æ—Å—Ç—É –ø–æ—Å–ª—É–≥—É
        if city in ADDITIONAL_SERVICES_SINGLE:
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏ –±–µ–∑ —Ü—ñ–Ω–∏
            service_name = text.split(" - ")[0].strip() if " - " in text else text
            logger.info(f"[ADDITIONAL_SERVICES] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Å—Ç—É –ø–æ—Å–ª—É–≥—É: {service_name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–∞–∫–∞ –ø–æ—Å–ª—É–≥–∞ –≤ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Å—Ç–∏—Ö –ø–æ—Å–ª—É–≥
            if service_name in ADDITIONAL_SERVICES_SINGLE[city]:
                logger.info(f"[ADDITIONAL_SERVICES] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—É –ø–æ—Å–ª—É–≥—É: {service_name}")
                price = ADDITIONAL_SERVICES_SINGLE[city][service_name]
                if isinstance(price, str):
                    price_text = price
                else:
                    price_text = f"{price} –≥—Ä–Ω"
                    
                if 'additional_services' not in context.user_data:
                    context.user_data['additional_services'] = {}
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–Ω—É —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
                context.user_data['additional_services'][service_name] = price_text
                logger.info(f"[ADDITIONAL_SERVICES] –î–æ–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç—É –ø–æ—Å–ª—É–≥—É: {service_name} = {price_text}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–∏–ª—å–Ω–∏—Ö –±—É–ª—å–±–∞—à–æ–∫
                if service_name == 'ü´ß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–ª—å–Ω–∏—Ö –±—É–ª—å–±–∞—à–æ–∫':
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—é—á –º—ñ—Å—Ç–∞
                    city_key = None
                    normalized_city = city.replace('-', '').replace(' ', '').upper()
                    for ck in ADDITIONAL_SERVICES_PHOTOS.keys():
                        if ck.replace('-', '').replace(' ', '').upper() == normalized_city:
                            city_key = ck
                            break
                    if city_key and "–ì–ï–ù–ï–†–ê–¢–û–†" in ADDITIONAL_SERVICES_PHOTOS[city_key]:
                        photo_path = ADDITIONAL_SERVICES_PHOTOS[city_key]["–ì–ï–ù–ï–†–ê–¢–û–†"].get(service_name)
                        logger.info(f"[ADDITIONAL_SERVICES] –®–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {photo_path}")
                        if photo_path and os.path.exists(photo_path):
                            logger.info(f"[ADDITIONAL_SERVICES] –§–∞–π–ª {photo_path} —ñ—Å–Ω—É—î")
                            await update.message.reply_photo(
                                photo=open(photo_path, 'rb'),
                                caption=f"–ü–æ—Å–ª—É–≥—É '{service_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.\n–í–∞—Ä—Ç—ñ—Å—Ç—å: {price_text}",
                                reply_markup=create_additional_services_keyboard(city, context)
                            )
                        else:
                            logger.warning(f"[ADDITIONAL_SERVICES] –§–∞–π–ª {photo_path} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                            await update.message.reply_text(
                                f"–ü–æ—Å–ª—É–≥—É '{service_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.\n–í–∞—Ä—Ç—ñ—Å—Ç—å: {price_text}",
                                reply_markup=create_additional_services_keyboard(city, context)
                            )
                    else:
                        logger.warning(f"[ADDITIONAL_SERVICES] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É –º—ñ—Å—Ç—ñ {city}")
                        await update.message.reply_text(
                            f"–ü–æ—Å–ª—É–≥—É '{service_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.\n–í–∞—Ä—Ç—ñ—Å—Ç—å: {price_text}",
                            reply_markup=create_additional_services_keyboard(city, context)
                        )
            
        # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –æ–ø—Ü—ñ—é –ø–æ—Å–ª—É–≥–∏
        if 'selected_service' in context.user_data:
            service = context.user_data['selected_service']
            logger.info(f"[ADDITIONAL_SERVICES] –û–±—Ä–æ–±–∫–∞ –æ–ø—Ü—ñ—ó –¥–ª—è –ø–æ—Å–ª—É–≥–∏: {service}")
            if city in ADDITIONAL_SERVICES_WITH_SUBMENU and service in ADDITIONAL_SERVICES_WITH_SUBMENU[city]:
                options = ADDITIONAL_SERVICES_WITH_SUBMENU[city][service]
                for option, price in options.items():
                    if text.startswith(option):
                        logger.info(f"[ADDITIONAL_SERVICES] –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –æ–ø—Ü—ñ—é: {text}")
                        if 'additional_services' not in context.user_data:
                            context.user_data['additional_services'] = {}
                        context.user_data['additional_services'][service] = text
                        del context.user_data['selected_service']
                        logger.info(f"[ADDITIONAL_SERVICES] –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ—ó —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ selected_service")
                        
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ —Ñ–æ—Ç–æ
                        photo_path = None
                        option_name = option.split(" - ")[0].strip()
                        logger.info(f"[ADDITIONAL_SERVICES] –û–ø—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —Ñ–æ—Ç–æ: {option_name}")
                        
                        # --- –ù–û–í–ê –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É —Ñ–æ—Ç–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º—ñ—Å—Ç–∞ —è–∫ –∫–ª—é—á–∞ ---
                        city_key = None
                        normalized_city = city.replace('-', '').replace(' ', '').upper()
                        for ck in ADDITIONAL_SERVICES_PHOTOS.keys():
                            if ck.replace('-', '').replace(' ', '').upper() == normalized_city:
                                city_key = ck
                                break
                        if not city_key:
                            logger.error(f"[ADDITIONAL_SERVICES] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ç–æ '{city}' —É ADDITIONAL_SERVICES_PHOTOS")
                            await update.message.reply_text("–§–æ—Ç–æ –¥–ª—è —Ü—ñ—î—ó –ø–æ—Å–ª—É–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–º—ñ—Å—Ç–æ)")
                            return CHOOSING_ADDITIONAL_SERVICES

                        # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏ (–®–û–£, –ú–ê–ô–°–¢–ï–†-–ö–õ–ê–°...) —É —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ
                        service_type = None
                        for key in ADDITIONAL_SERVICES_PHOTOS[city_key]:
                            if key.upper() in service.upper() or service.upper() in key.upper():
                                service_type = key
                                break
                        if not service_type:
                            normalized_service = service.replace('-', '').replace(' ', '').upper()
                            for key in ADDITIONAL_SERVICES_PHOTOS[city_key]:
                                if key.replace('-', '').replace(' ', '').upper() in normalized_service or normalized_service in key.replace('-', '').replace(' ', '').upper():
                                    service_type = key
                                    break
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö–∞–∫ –¥–ª—è "–ì–ï–ù–ï–†–ê–¢–û–†–ê"
                        if not service_type:
                            if "–ì–ï–ù–ï–†–ê–¢–û–†" in service.upper() or "–ë–£–õ–¨–ë–ê–®–û–ö" in service.upper():
                                service_type = "–ì–ï–ù–ï–†–ê–¢–û–†"
                            else:
                                logger.error(f"[ADDITIONAL_SERVICES] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏ '{service}' –¥–ª—è –º—ñ—Å—Ç–∞ '{city_key}'")
                                await update.message.reply_text("–§–æ—Ç–æ –¥–ª—è —Ü—ñ—î—ó –ø–æ—Å–ª—É–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ç–∏–ø)")
                                return CHOOSING_ADDITIONAL_SERVICES

                        # 3. –®—É–∫–∞—î–º–æ —Ñ–æ—Ç–æ –ø–æ –Ω–∞–∑–≤—ñ –æ–ø—Ü—ñ—ó
                        photo_dict = ADDITIONAL_SERVICES_PHOTOS[city_key][service_type]
                        base_name = option_name.split('-')[0].strip().upper()
                        photo_path = None
                        for name in photo_dict:
                            if name.upper() in base_name or base_name in name.upper():
                                photo_path = photo_dict[name]
                                break

                        if photo_path:
                            logger.info(f"[ADDITIONAL_SERVICES] –ó–Ω–∞–π–¥–µ–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ: {photo_path}")
                            if os.path.exists(photo_path):
                                logger.info(f"[ADDITIONAL_SERVICES] –§–∞–π–ª {photo_path} —ñ—Å–Ω—É—î")
                                await update.message.reply_photo(
                                    photo=open(photo_path, 'rb'),
                                    caption=f"–û–ø—Ü—ñ—é '{text}' –¥–ª—è –ø–æ—Å–ª—É–≥–∏ '{service}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.",
                                    reply_markup=create_additional_services_keyboard(city, context)
                                )
                            else:
                                logger.warning(f"[ADDITIONAL_SERVICES] –§–∞–π–ª {photo_path} –Ω–µ —ñ—Å–Ω—É—î")
                                await update.message.reply_text(
                                    f"–û–ø—Ü—ñ—é '{text}' –¥–ª—è –ø–æ—Å–ª—É–≥–∏ '{service}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.",
                                    reply_markup=create_additional_services_keyboard(city, context)
                                )
                        else:
                            logger.warning(f"[ADDITIONAL_SERVICES] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø—Ü—ñ—ó {option_name}")
                            await update.message.reply_text(
                                f"–û–ø—Ü—ñ—é '{text}' –¥–ª—è –ø–æ—Å–ª—É–≥–∏ '{service}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É.",
                                reply_markup=create_additional_services_keyboard(city, context)
                            )
                        return CHOOSING_ADDITIONAL_SERVICES
                            
        logger.warning(f"[ADDITIONAL_SERVICES] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {text}")
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ—ó.",
            reply_markup=create_additional_services_keyboard(city, context)
        )
        return CHOOSING_ADDITIONAL_SERVICES
        
    except Exception as e:
        logger.error(f"[ADDITIONAL_SERVICES] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏: {str(e)}")
        logger.exception(e)  # –î–æ–¥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_additional_services_keyboard(city, context)
        )
        return CHOOSING_ADDITIONAL_SERVICES

async def district_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–∞–π–æ–Ω—É"""
    try:
        district = update.message.text
        city = context.user_data.get('selected_city')
        
        if district == BACK_BUTTON:
            # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É
            remove_choice_by_type(context, '–†–∞–π–æ–Ω')
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É —Ä–∞–π–æ–Ω—É
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:",
                reply_markup=create_additional_services_keyboard(city, context)
            )
            return CHOOSING_ADDITIONAL_SERVICES
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π —Ä–∞–π–æ–Ω —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if district not in TAXI_PRICES[city]:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É:",
                reply_markup=create_district_keyboard(city)
            )
            return CHOOSING_DISTRICT
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É
        add_choice(context, "–†–∞–π–æ–Ω", district)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫—Å—ñ
        taxi_price = TAXI_PRICES[city][district]
        price_text = f"{taxi_price} –≥—Ä–Ω" if isinstance(taxi_price, (int, float)) else taxi_price
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É
        await update.message.reply_text(
            f"üèò –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω: {district}\n"
            f"üöï –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫—Å—ñ –≤ –æ–¥–∏–Ω –±—ñ–∫: {price_text}\n"
            "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫—Å—ñ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å!"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        await show_summary(update, context)
        return CHOOSING_SUMMARY
        
    except Exception as e:
        logger.error(f"[DISTRICT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É —Ä–∞–π–æ–Ω—É: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_district_keyboard(city)
        )
        return CHOOSING_DISTRICT

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–æ–∫ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # Debug: Log user data for troubleshooting
        logger.info(f"[SUMMARY] context.user_data at start: {context.user_data}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤–∏–±–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        choices = context.user_data.get('choices', [])
        
        # –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        summary = "üìã –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ —Å–≤—è—Ç–∞:\n\n"
        
        # –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        for choice in choices:
            if choice['type'] in ["–ú—ñ—Å—Ç–æ", "–¢–∏–ø –ø–æ–¥—ñ—ó", "–õ–æ–∫–∞—Ü—ñ—è", "–¢–µ–º–∞—Ç–∏–∫–∞", "–ü—ñ–¥—Ç–µ–º–∞", "–§–æ—Ä–º–∞—Ç"]:
                summary += f"{choice['type']}: {choice['value']}\n"
        
        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        summary += "\nüí∞ –î–µ—Ç–∞–ª—ñ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:\n"
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó (–ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è choices):
        city = context.user_data.get('selected_city')
        if not city:
            city = next((choice['value'] for choice in choices 
                        if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
        total_price = 0
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω—É –ø–∞–∫–µ—Ç—É
        for choice in choices:
            if choice['type'] == "–ü–∞–∫–µ—Ç":
                city = next((c['value'] for c in choices if c['type'] == "–ú—ñ—Å—Ç–æ"), None)
                event_type = next((e['value'] for e in choices if e['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó"), None)
                logger.info(f"[SUMMARY] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç: {choice['value']} –¥–ª—è –º—ñ—Å—Ç–∞ {city} —Ç–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó {event_type}")
                if city and event_type and city in PAKET_PRICES and event_type in PAKET_PRICES[city]:
                    logger.info(f"[SUMMARY] PAKET_PRICES –¥–ª—è –º—ñ—Å—Ç–∞ {city} —Ç–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó {event_type}: {PAKET_PRICES[city][event_type]}")
                    if choice['value'] in PAKET_PRICES[city][event_type]:
                        package_price = PAKET_PRICES[city][event_type][choice['value']]
                        total_price += package_price
                        summary += f"–ü–∞–∫–µ—Ç: {choice['value']} - {package_price} –≥—Ä–Ω\n"
            elif choice['type'] == "–ö–≤–µ—Å—Ç":
                import re
                city = next((c['value'] for c in choices if c['type'] == "–ú—ñ—Å—Ç–æ"), None)
                
                try:
                    match = re.match(r"(.+?\(.*?\))\s*\((.*?)\)$", choice['value'])
                    if match:
                        quest_name = match.group(1).strip()
                        duration = match.group(2).strip()
                        price = QWEST[city][quest_name][duration]
                        total_price += price
                        summary += f"–ö–≤–µ—Å—Ç: {quest_name} ({duration}) - {price} –≥—Ä–Ω\n"
                    else:
                        logger.error(f"[SUMMARY] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∫–≤–µ—Å—Ç: {choice['value']}")
                        summary += f"–ö–≤–µ—Å—Ç: {choice['value']}: –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è\n"
                except Exception as e:
                    logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –∫–≤–µ—Å—Ç—É: {str(e)}")
                    summary += f"–ö–≤–µ—Å—Ç: {choice['value']}: –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è\n"
            elif choice['type'] == '–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ü—ñ–Ω–∞':
                # –í–∏—Ç—è–≥—É—î–º–æ —Ü—ñ–Ω—É –∑ —Ç–µ–∫—Å—Ç—É
                price_text = choice['value']
                if "–≥—Ä–Ω" in price_text:
                    price = int(price_text.split("–≥—Ä–Ω")[0].strip().split()[-1])
                    total_price += price
                    summary += f"–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –æ–ø–ª–∞—Ç–∞: {price_text}\n"
                else:
                    summary += f"–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –æ–ø–ª–∞—Ç–∞: {price_text}\n"
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω–∏ –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏
        if 'additional_services' in context.user_data:
            for service, option in context.user_data['additional_services'].items():
                try:
                    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É: –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∑ "–≥—Ä–Ω" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "4000 –≥—Ä–Ω")
                    if isinstance(option, str) and option.strip().endswith('–≥—Ä–Ω') and option.strip().replace(' –≥—Ä–Ω', '').replace(' ', '').isdigit():
                        price = int(option.strip().split()[0])
                        total_price += price
                        summary += f"‚ûï {service}: {option}\n"
                    elif ' - ' in option:
                        # –î–ª—è —à–æ—É —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ—Å–ª—É–≥ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "–ù–ê–ó–í–ê - –¶–Ü–ù–ê"
                        price_str = option.split(' - ')[1]
                        if '–≥—Ä–Ω' in price_str:
                            try:
                                price = int(price_str.split()[0])
                                total_price += price
                                summary += f"‚ûï {service}: {option}\n"
                            except ValueError:
                                summary += f"‚ûï {service}: {option}\n"
                        else:
                            summary += f"‚ûï {service}: {option}\n"
                    else:
                        # –î–ª—è –º–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ—Å–ª—É–≥ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "–ù–ê–ó–í–ê - –î–ï–¢–ê–õ–Ü - –¶–Ü–ù–ê"
                        try:
                            # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
                            parts = option.split(' - ')
                            if len(parts) >= 2:
                                # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É —è–∫ —Ü—ñ–Ω—É
                                price_str = parts[-1]
                                if '–≥—Ä–Ω' in price_str:
                                    price = int(price_str.split()[0])
                                    total_price += price
                            summary += f"‚ûï {service}: {option}\n"
                        except Exception as e:
                            logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –¥–ª—è {service}: {str(e)}")
                            summary += f"‚ûï {service}: {option}\n"
                except Exception as e:
                    logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏: {str(e)}")
                    summary += f"‚ûï {service}: {option}\n"
        
        # –î–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫—Å—ñ
        district = next((choice['value'] for choice in choices if choice['type'] == "–†–∞–π–æ–Ω"), None)
        if district and city:
            try:
                taxi_price = TAXI_PRICES[city][district]
                if isinstance(taxi_price, (int, float)):
                    total_price += taxi_price
                    summary += f"üöï –¢–∞–∫—Å—ñ ({district}): {taxi_price} –≥—Ä–Ω\n"
                else:
                    summary += f"üöï –¢–∞–∫—Å—ñ ({district}): {taxi_price}\n"
            except Exception as e:
                logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ü—ñ–Ω–∏ —Ç–∞–∫—Å—ñ: {str(e)}")
                summary += f"üöï –¢–∞–∫—Å—ñ ({district}): –¶—ñ–Ω–∞ —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è\n"
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
        summary += f"\nüíµ –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_price} –≥—Ä–Ω\n"
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω
        summary += "\n‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: —Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫, —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await update.message.reply_text(
            summary,
            reply_markup=create_summary_keyboard()
        )
        
    except Exception as e:
        logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø—ñ–¥—Å—É–º–∫—É: {str(e)} | context.user_data: {context.user_data}")
        await update.message.reply_text(
            "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø—ñ–¥—Å—É–º–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_summary_keyboard()
        )

async def summary_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–º—É –º–µ–Ω—é"""
    try:
        text = update.message.text
        city = context.user_data.get('selected_city')
        if not city:
            city = next((choice['value'] for choice in context.user_data.get('choices', []) if choice['type'] == "–ú—ñ—Å—Ç–æ"), None)
        
        if text == BACK_BUTTON:
            # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É
            remove_choice_by_type(context, '–†–∞–π–æ–Ω')
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É —Ä–∞–π–æ–Ω—É
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–∞–π–æ–Ω:",
                reply_markup=create_district_keyboard(city)
            )
            return CHOOSING_DISTRICT
            
        elif text == "üìÖ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —á–∞—Å/–¥–∞—Ç—É":
            # 1. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await send_summary_to_manager(update, context)
            # 2. –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
            await update.message.reply_text(
                "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton('üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)],
                    [KeyboardButton('‚¨ÖÔ∏è –ù–∞ –ø–æ—á–∞—Ç–æ–∫')]
                ], resize_keyboard=True)
            )
            return PHONE_CONTACT
            
        else:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ—ó.",
                reply_markup=create_summary_keyboard()
            )
            return CHOOSING_SUMMARY
            
    except Exception as e:
        logger.error(f"[SUMMARY] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≤ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–º—É –º–µ–Ω—é: {str(e)}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_summary_keyboard()
        )
        return CHOOSING_SUMMARY

async def summary_chosen_contact_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥–∞–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–º—É –º–µ–Ω—é"""
    try:
        logger.info(f"[SUMMARY_CONTACT] update.message: {update.message}")
        logger.info(f"[SUMMARY_CONTACT] context.user_data: {context.user_data}")
        # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ "–ù–∞ –ø–æ—á–∞—Ç–æ–∫"
        if update.message.text == "‚¨ÖÔ∏è –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
            logger.info("[SUMMARY_CONTACT] –ù–∞—Ç–∏—Å–Ω—É—Ç–æ '–ù–∞ –ø–æ—á–∞—Ç–æ–∫'. –û—á–∏—â–∞—é context.user_data.")
            context.user_data.clear()
            await update.message.reply_text(
                Hello_World,
                reply_markup=create_city_keyboard()
            )
            return CHOOSING_CITY

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –∫–æ–Ω—Ç–∞–∫—Ç
        if update.message.contact:
            logger.info(f"[SUMMARY_CONTACT] –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç: {update.message.contact}")
            phone = update.message.contact.phone_number
            user = update.effective_user
            contact_info = (
                f"<b>–ö–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n"
                f"ID: <code>{user.id}</code>\n"
                f"–Ü–º'—è: {user.first_name or ''} {user.last_name or ''}\n"
                f"Username: @{user.username if user.username else '-'}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>"
            )
            await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=contact_info, parse_mode='HTML')
            await update.message.reply_text(
                "–î—è–∫—É—î–º–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è.",
                reply_markup=create_city_keyboard()
            )
            # --- –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ö–û–ù–¢–ê–ö–¢–£ –í –ë–ê–ó–Ü –î–ê–ù–ò–• ---
            user_info = get_unified_user_info(user, user_data.get_user(user.id), update)
            user_info['phone_number'] = phone
            user_data.add_user(user.id, user_info)
            logger.info(f"[SUMMARY_CONTACT] –ö–æ–Ω—Ç–∞–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user.id}")
            context.user_data.clear()
            return CHOOSING_CITY
        
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —â–æ—Å—å —ñ–Ω—à–µ
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚¨ÖÔ∏è –ù–∞ –ø–æ—á–∞—Ç–æ–∫'.",
            reply_markup=create_summary_keyboard()
        )
        return CHOOSING_SUMMARY

    except Exception as e:
        logger.error(f"[SUMMARY_CONTACT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞–¥–∞–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–º—É –º–µ–Ω—é: {str(e)}")
        logger.exception(e)
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            reply_markup=create_summary_keyboard()
        )
        return CHOOSING_SUMMARY

# ============================================
# –°–ò–°–¢–ï–ú–ù–Ü –§–£–ù–ö–¶–Ü–á
# ============================================
async def save_state(update: Update, context: ContextTypes.DEFAULT_TYPE, state: int) -> None:
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏"""
    if user_data and update.effective_user:
        # –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Å —Å—Ç–∞–Ω—É —É –≤–∫–ª–∞–¥–µ–Ω–æ–º—É –ø–æ–ª—ñ 'state'
        state_inner = {
            'choices': context.user_data.get('choices', []),
            'last_state': state,
            'last_update': datetime.now().isoformat()
        }
        user_data.save_conversation_state(update.effective_user.id, {'state': state_inner})

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    if user_data and update.effective_user:
        user_data.clear_conversation_state(update.effective_user.id)
    
    await update.message.reply_text(
        '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
    if not context.user_data.get('choices'):
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É, –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç
        await update.message.reply_text(
            Hello_World,
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω
    last_choice = context.user_data['choices'][-1]
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–±–æ—Ä—É
    if last_choice['type'] == "–ú—ñ—Å—Ç–æ":
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —è–∫—É –ø–æ–¥—ñ—é –±—É–¥–µ—Ç–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
            reply_markup=create_event_type_keyboard()
        )
        return CHOOSING_EVENT_TYPE
    elif last_choice['type'] == "–¢–∏–ø –ø–æ–¥—ñ—ó":
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–µ —Ö–æ—Ç—ñ–ª–∏ –± —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏:",
            reply_markup=create_location_keyboard(last_choice['value'])
        )
        return CHOOSING_LOCATION
    elif last_choice['type'] == "–§–æ—Ä–º–∞—Ç":
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É —Å–≤—è—Ç–∞:",
            reply_markup=create_theme_keyboard()
        )
        return CHOOSING_THEME
    else:
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—Ç–∞–Ω, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—á–∞—Ç–∫—É
        await update.message.reply_text(
            Hello_World,
            reply_markup=create_city_keyboard()
        )
        return CHOOSING_CITY

# ============================================
# –ë–õ–û–ö –ú–ï–ù–ï–î–ñ–ï–†–ê
# ============================================
async def export_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ñ–∞–π–ª—É –∑ —É—Å—ñ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    user_id = update.effective_user.id
    if MANAGER_CHAT_ID is None or user_id != MANAGER_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    data = []
    for uid, info in user_data.users.items():
        try:
            numeric_uid = int(uid)
        except (ValueError, TypeError):
            continue
        row = {
            'user_id': info.get('user_id', ''),
            'username': info.get('username', ''),
            'first_name': info.get('first_name', ''),
            'last_name': info.get('last_name', ''),
            'language_code': info.get('language_code', ''),
            'is_bot': info.get('is_bot', ''),
            'status': (info or {}).get('status', ''),
            'last_update': info.get('last_update', ''),
            'created_at': (info or {}).get('created_at', ''),
            'phone_number': info.get('phone_number', ''),
            'chat_id': info.get('chat_id', ''),
            'type': info.get('type', ''),
            'city': info.get('city', ''),
            'order_count': info.get('order_count', 0),
            'visits': info.get('visits', 0),
            'device_info': info.get('device_info', ''),
        }
        data.append(row)
    # –§–æ—Ä–º—É—î–º–æ DataFrame –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
    columns = [
        'user_id', 'username', 'first_name', 'last_name', 'language_code', 'phone_number',
        'is_bot', 'status', 'last_update', 'created_at', 'chat_id', 'type', 'city', 'order_count', 'visits', 'device_info'
    ]
    df = pd.DataFrame(data, columns=columns)
    buffer = BytesIO()
    df.to_excel(buffer, index=False)
    buffer.seek(0)
    await context.bot.send_document(
        chat_id=MANAGER_CHAT_ID,
        document=buffer,
        filename="users.xlsx",
        caption="üìã –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    )

# --- –ú–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
from telegram.constants import ChatAction

async def broadcast_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/—Ñ–∞–π–ª—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)"""
    user_id = update.effective_user.id
    if MANAGER_CHAT_ID is None or user_id != MANAGER_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    if not context.args and not update.message.reply_to_message:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ –∑—Ä–æ–±—ñ—Ç—å reply –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º/–º–µ–¥—ñ–∞!")
        return
    msg_text = ' '.join(context.args)
    media_msg = update.message.reply_to_message
    sent, failed = 0, 0
    for uid, info in user_data.users.items():
        chat_id = info.get('chat_id')
        if not chat_id:
            continue
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
            if msg_text.strip():
                await context.bot.send_message(chat_id=chat_id, text=msg_text, parse_mode='HTML')
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞ –∑ replied –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if media_msg:
                if media_msg.photo:
                    await context.bot.send_photo(chat_id=chat_id, photo=media_msg.photo[-1].file_id, caption=msg_text or None)
                if media_msg.document:
                    await context.bot.send_document(chat_id=chat_id, document=media_msg.document.file_id, caption=msg_text or None)
                if media_msg.video:
                    await context.bot.send_video(chat_id=chat_id, video=media_msg.video.file_id, caption=msg_text or None)
                if media_msg.audio:
                    await context.bot.send_audio(chat_id=chat_id, audio=media_msg.audio.file_id, caption=msg_text or None)
            sent += 1
        except Exception as e:
            failed += 1
    await update.message.reply_text(f'‚úÖ –†–æ–∑—ñ—Å–ª–∞–Ω–æ: {sent}\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}')

async def hello_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /hello ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)"""
    user_id = update.effective_user.id
    if MANAGER_CHAT_ID is None or user_id != MANAGER_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /hello ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    target_id = context.args[0]
    try:
        target_id = int(target_id)
    except ValueError:
        await update.message.reply_text("ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return
    msg_text = ' '.join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=target_id, text=msg_text)
        await update.message.reply_text("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {e}")

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ---
async def send_summary_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º—É—î —ñ –Ω–∞–¥—Å–∏–ª–∞—î –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user = update.effective_user
    logger.info(f"[SEND_SUMMARY] –í–∏–∫–ª–∏–∫ send_summary_to_manager –¥–ª—è user_id={user.id}")
    logger.info(f"[SEND_SUMMARY] context.user_data: {context.user_data}")
    choices = context.user_data.get('choices', [])
    additional_services = context.user_data.get('additional_services', {})
    summary_lines = [
        f"<b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>",
        f"ID: <code>{user.id}</code>",
        f"–Ü–º'—è: {user.full_name}\n",
        f"Username: @{user.username if user.username else '-'}",
        f"–ú–æ–≤–∞: {user.language_code or '-'}",
        f"\n<b>–í–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>"
    ]
    for ch in choices:
        summary_lines.append(f"‚Ä¢ <b>{ch['type']}</b>: {ch['value']}")
    if additional_services:
        summary_lines.append("\n<b>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏:</b>")
        for service, option in additional_services.items():
            summary_lines.append(f"‚ûï {service}: {option}")
    summary = '\n'.join(summary_lines)
    logger.info(f"[SEND_SUMMARY] summary to send: {summary}")
    logger.info(f"[SEND_SUMMARY] MANAGER_CHAT_ID: {MANAGER_CHAT_ID}")
    try:
        await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=summary, parse_mode='HTML')
        logger.info("[SEND_SUMMARY] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        
# ============================================
# –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ============================================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
            CHOOSING_EVENT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen)],
            CHOOSING_EVENT_TYPE_Sim_svjata: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen__Sim_svjata)],
            FFMILY_DOP: [MessageHandler(filters.TEXT & ~filters.COMMAND, family_dop_chosen)],
            CHOOSING_EVENT_TYPE_inshe: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen_inshe)],
            CHOOSING_EVENT_TYPE_afisha: [MessageHandler(filters.TEXT & ~filters.COMMAND, event_type_chosen_afisha)],
            CHOOSING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_chosen)],
            CHOOSING_LOCATION_inshe: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_chosen_inshe)],
            CHOOSING_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, theme_chosen)],
            CHOOSING_THEME2: [MessageHandler(filters.TEXT & ~filters.COMMAND, theme2_chosen)],
            CHOOSING_THEME_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, theme_details_chosen)],
            CHOOSING_FORMAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, format_chosen)],
            CHOOSING_HOURLY_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hourly_price_chosen)],
            CHOOSING_PACKAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, package_chosen)],
            CHOOSING_QWEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, qwest_chosen)],
            CHOOSING_QWEST_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, qwest_duration_chosen)],
            CHOOSING_FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_chosen)],
            CHOOSING_ADDITIONAL_SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional_services_chosen)],
            CHOOSING_SERVICE_OPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, additional_services_chosen)],
            CHOOSING_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, district_chosen)],
            CHOOSING_SUMMARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, summary_chosen)],
            PHONE_CONTACT: [
                MessageHandler(filters.CONTACT, summary_chosen_contact_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, summary_chosen_contact_phone),
            ],
            
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)],
    )
    
    application.add_handler(conv_handler)
    # –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è /start —Ç–∞ /reset
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('users', export_users_command))
    application.add_handler(CommandHandler('all', broadcast_all_command))
    application.add_handler(CommandHandler('hello', hello_user_command))
    application.run_polling()

if __name__ == '__main__':
    main()
